import certifi
import ssl
import geopy.geocoders
import datetime

from aiogram import Router, F
from aiogram.types import (Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, ContentType, PhotoSize)
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.filters import Command, CommandStart
from aiogram.filters.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.filters import Text, StateFilter
from aiogram.fsm.state import default_state
from aiogram.types import InputMediaPhoto
from aiogram.filters import and_f, or_f
# from aiogram_calendar import simple_cal_callback, SimpleCalendar, dialog_cal_callback, DialogCalendar

from geopy.distance import geodesic
from geopy.distance import distance
from geopy.geocoders import Nominatim
from geopy.extra.rate_limiter import RateLimiter
from geopy import Point
from typing import List, Tuple, Dict
from copy import deepcopy

from main import BotDB, bot
from keyboards import pagination_kb

router: Router = Router()

user_dict_template: dict = {'page': 1,
                            'bookmarks': set()}

nearest_courts: List[Tuple[int, int, str, str, str, float, float, int, int, int, int, int]] = []
users_db: dict = {}
photo_ERROR = open('/Users/todorov_want/Desktop/FinallyTgBot/handlers/ERROR_photo.jpeg', 'rb')
events_db: dict = {}
admin_events_db: dict = {}

@router.message(Command(commands=['start']), StateFilter(default_state))
async def process_start_command(message: Message):
    """
    –•—ç–Ω–¥–ª–µ—Ä
    """
    menu_botton: KeyboardButton = KeyboardButton(text=' üè† –ú–µ–Ω—é')
    keyboard2: ReplyKeyboardMarkup = ReplyKeyboardMarkup(keyboard=[[menu_botton]],
                                                        resize_keybord=True)
    await message.answer_photo(
        photo='https://i.pinimg.com/564x/bc/99/11/bc99116f57ff62dfd621f6b935f64ec3.jpg',
        reply_markup=keyboard2)

    reg_botton: InlineKeyboardButton = InlineKeyboardButton(
        text='ü§ùüèº –ü–æ–∑–Ω–∞–∫–æ–º–∏—Ç—Å—è',
        callback_data='user_registration')
    canc_botton: InlineKeyboardButton = InlineKeyboardButton(
        text='üôÖüèΩ –û—Ç–º–µ–Ω–∞',
        callback_data='cancel_registration')
    keyboard: InlineKeyboardMarkup = InlineKeyboardMarkup(
        inline_keyboard=[[reg_botton, canc_botton]])

    await message.answer(text='–ü—Ä–∏–≤–µ—Ç!\n'
                              '–≠—Ç–æ—Ç –±–æ—Ç - —Ä–µ—à–µ–Ω–∏–µ —Ç–≤–æ–µ–π –Ω–∞—Å—É—â–Ω–æ–π –ø—Ä–æ–±–ª–µ–º—ã, –æ–¥–∏–Ω–æ—á–Ω–æ–π –∏–≥—Ä—ã –≤ –±–∞—Å–∫–µ—Ç–±–æ–ª!\n\n'
                         '–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ª—É—á—à–µ –ø–æ–Ω–∏–º–∞—Ç—å, –∫–∞–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è –∏–≥—Ä–æ–∫–∏ –æ–±–∏—Ç–∞—é—Ç –Ω–∞ –Ω–∞—à–∏—Ö –ø–ª–æ—â–∞–¥–∫–∞—Ö –∏ –≤–∞–º –±—ã–ª–æ —É–¥–æ–±–Ω–µ–µ –≤—ã–±–∏—Ä–∞—Ç—å —Å–µ–±–µ —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–≤,'
                         '–ø—Ä–µ–¥–ª–∞–≥–∞—é –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—Å—è üëáüèøüëáüèæüëáüèΩüëáüèºüëáüèª',
                         reply_markup=keyboard)

@router.message(Command(commands=['start']), ~StateFilter(default_state))
async def process_start_command(message: Message):
    """
    –•—ç–Ω–¥–ª–µ—Ä
    """
    await message.answer(text='–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥—Ä—É–≥–æ–≥–æ –¥–µ–π—Ç—Å–≤–∏—è, –∫–æ–º–∞–Ω–¥–∞ "/start" –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞!\n\n'
                              '–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É "/cancel"(–Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üè† –ú–µ–Ω—é") –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Å–æ–≥–ª–∞—Å–Ω–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º!')

@router.message(Command(commands=['help']), StateFilter(default_state))
async def process_help_command(message: Message):
    """
    –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É '/help'
    """
    # menu_botton: KeyboardButton = KeyboardButton(text=' üè† –ú–µ–Ω—é')
    # keyboard: ReplyKeyboardMarkup = ReplyKeyboardMarkup(keyboard=[[menu_botton]],
    #                                                     resize_keybord=True,
    #                                                     one_time_keybord=True)
    await message.answer(text='–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –±–∞—Å–∫–µ—Ç–±–æ–ª—å–Ω–æ–≥–æ –∫–æ–º—å—é–Ω–∏—Ç–∏ –∏ —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã, –æ–¥–∏–Ω–æ—á–Ω–æ–π –∏–≥—Ä—ã –≤ –±–∞—Å–∫–µ—Ç–±–æ–ª!\n'
                                  '–ö—Ä–∞—Ç–∫–∏–π —ç–∫—Å–∫—É—Ä—Å –ø–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É:\n'
                                  '"‚õπüèø‚Äç‚ôÇÔ∏è –ù–∞–π—Ç–∏ –ø–ª–æ—â–∞–¥–∫—É –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏" - –Ω–∞–∂–∞–≤ –Ω–∞ –Ω–µ–µ, –≤—ã —Å–º–æ–∂–∏—Ç–µ —Å–æ–≥–ª–∞—Å–Ω–æ —Å–≤–æ–µ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –∏–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–æ—á–∫–µ –Ω–∞ –∫–∞—Ä—Ç–µ, –Ω–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à—É—é –±–∞—Å–∫–µ—Ç–±–æ–ª—å–Ω—É—é –ø–ª–æ—â–∞–¥–∫—É —Å–æ –≤—Å–µ–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏;\n'
                                  '"üóëÔ∏è –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –ø–ª–æ—â–∞–¥–∫—É" - –Ω–∞–∂–∞–≤ –Ω–∞ –Ω–µ–µ, –≤—ã —Å–º–æ–∂–µ—Ç–µ –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ —à–∞–≥–æ–≤ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –±–∞—Å–∫–µ—Ç–±–æ–ª—å–Ω—É—é –ø–ª–æ—â–∞–¥–∫—É;\n'
                                  '"üßæ –ü–æ–∫–∞–∑–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è" - –Ω–∞–∂–∞–≤ –Ω–∞ –Ω–µ–µ, –≤–∞–º –±—É–¥–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç\n'
                                  '"üìÜ –ù–∞–∑–Ω–∞—á–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ" - –Ω–∞–∂–∞–≤ –Ω–∞ –Ω–µ–µ, –≤—ã —Å–º–æ–∂–µ—Ç–µ –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ —à–∞–≥–æ–≤ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –±–∞—Å–∫–µ—Ç–±–æ–ª—å–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Å –¥–æ—Å–∫–æ–Ω–∞–ª—å–Ω—ã–º –∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º;\n'
                                  '"‚öíÔ∏è –î–µ–π—Å—Ç–≤–∏—è —Å –∏–≥—Ä–æ–π" - –†–∞–∑–¥–µ–ª —Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è–º–∏ –ø–æ –∏–≥—Ä–∞–º, –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π,'
                                  '–¥–ª—è –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∞ –±–∞—Å–∫–µ—Ç–±–æ–ª—å–Ω–æ–π –ø–ª–æ—â–∞–¥–∫–µ;\n'
                                  '"üõ†Ô∏è –î–µ–π—Å—Ç–≤–∏—è —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ–º" - –†–∞–∑–¥–µ–ª —Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è–º–∏ –ø–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º, –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª–µ–π(–∞–¥–º–∏–Ω–æ–≤) –æ–±—ä—è–≤–ª–µ–Ω–∏–π;\n'
                                  '"üóÑÔ∏è –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç" - –†–∞–∑–¥–µ–ª —Å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è;\n'
                                  '"‚öôÔ∏è –¢–µ—Ö. –ü–æ–¥–¥–µ—Ä–∂–∫–∞" - –†–∞–∑–¥–µ–ª —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –∏ –ø–æ–º–æ—â—å—é –ø–æ –±–æ—Ç—É;\n')

@router.message(Command(commands=['help']), ~StateFilter(default_state))
async def process_start_command(message: Message):
    """
    –•—ç–Ω–¥–ª–µ—Ä
    """
    await message.answer(text='–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥—Ä—É–≥–æ–≥–æ –¥–µ–π—Ç—Å–≤–∏—è, –∫–æ–º–∞–Ω–¥–∞ "/help" –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞!\n\n'
                              '–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É "/cancel"(–Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üè† –ú–µ–Ω—é") –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Å–æ–≥–ª–∞—Å–Ω–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º!')

@router.message(Command(commands=['cancel']), ~StateFilter(default_state))
async def process_cancel_command_state(message: Message, state: FSMContext):
    """
    –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É '/cancel'
    """
    await message.answer(text='–í—ã –≤—ã—à–ª–∏ –∏–∑ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è, –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ —É—á—Ç–µ–Ω—ã!')
    await state.clear()

@router.message(Command(commands=['cancel']), StateFilter(default_state))
async def process_cancel_command(message: Message):
    """
    –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É '/help'
    """
    await message.answer(text='–û—Ç–º–µ–Ω—è—Ç—å –Ω–µ—á–µ–≥–æ. –í—ã –≤–Ω–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è!')

@router.message(Command(commands=['support']), StateFilter(default_state))
async def process_support(message: Message):
    """
    aaaa
    """
    await message.answer(text='–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –∫–∞–∫–∏–µ –ª–∏–±–æ –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –±–æ—Ç–∞,\n'
                              '—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ—é –∂–∞–ª–æ–±—É –∏–ª–∏ –∂–µ –æ—Ç–∑—ã–≤ —ç—Ç–æ–º—É –∞–¥–º–∏–Ω—É: @alreadygoat')

@router.message(Command(commands=['support']), ~StateFilter(default_state))
async def process_support(message: Message):
    """

    """
    await message.answer(text='–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥—Ä—É–≥–æ–≥–æ –¥–µ–π—Ç—Å–≤–∏—è, –∫–æ–º–∞–Ω–¥–∞ "/support" –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞!\n\n'
                              '–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É "/cancel"(–Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üè† –ú–µ–Ω—é") –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Å–æ–≥–ª–∞—Å–Ω–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º!')

@router.callback_query(Text(text=['tech_setting']), StateFilter(default_state))
async def process_support(callback: CallbackQuery):
    """

    """
    comand_botton: InlineKeyboardButton = InlineKeyboardButton(
        text='üîé –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –±–æ—Ç–µ',
        callback_data='tech_commands')
    admin_botton: InlineKeyboardButton = InlineKeyboardButton(
        text='üì≤ –°–≤—è–∑–∞—Ç—å—Å—è —Å —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–æ–π',
        callback_data='admin_msg')
    keyboard: InlineKeyboardMarkup = InlineKeyboardMarkup(
        inline_keyboard=[[comand_botton],
                         [admin_botton]])
    await callback.message.answer(text='–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ —É–∑–Ω–∞—Ç—å –æ –±–æ—Ç–µ –∏ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã!\n',
                                  reply_markup=keyboard)
    await callback.answer()

@router.callback_query(Text(text=['tech_setting']), ~StateFilter(default_state))
async def process_support(callback: CallbackQuery):
    """

    """
    await callback.message.answer(text='–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥—Ä—É–≥–æ–≥–æ –¥–µ–π—Ç—Å–≤–∏—è, –∫–Ω–æ–ø–∫–∞ " ‚öôÔ∏è –¢–µ—Ö. –ü–æ–¥–¥–µ—Ä–∂–∫–∞" –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞!\n\n'
                                       '–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É "/cancel"(–Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üè† –ú–µ–Ω—é") –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Å–æ–≥–ª–∞—Å–Ω–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º!')
    await callback.answer()

@router.callback_query(Text(text='tech_commands'))
async def process_support_help(callback: CallbackQuery):
    await callback.message.answer('–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –±–∞—Å–∫–µ—Ç–±–æ–ª—å–Ω–æ–≥–æ –∫–æ–º—å—é–Ω–∏—Ç–∏ –∏ —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã, –æ–¥–∏–Ω–æ—á–Ω–æ–π –∏–≥—Ä—ã –≤ –±–∞—Å–∫–µ—Ç–±–æ–ª!'
                                  '–ö—Ä–∞—Ç–∫–∏–π —ç–∫—Å–∫—É—Ä—Å –ø–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É:\n'
                                  '"‚õπüèø‚Äç‚ôÇÔ∏è –ù–∞–π—Ç–∏ –ø–ª–æ—â–∞–¥–∫—É –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏" - –Ω–∞–∂–∞–≤ –Ω–∞ –Ω–µ–µ, –≤—ã —Å–º–æ–∂–∏—Ç–µ —Å–æ–≥–ª–∞—Å–Ω–æ —Å–≤–æ–µ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –∏–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–æ—á–∫–µ –Ω–∞ –∫–∞—Ä—Ç–µ, –Ω–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à—É—é –±–∞—Å–∫–µ—Ç–±–æ–ª—å–Ω—É—é –ø–ª–æ—â–∞–¥–∫—É —Å–æ –≤—Å–µ–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏;\n'
                                  '"üóëÔ∏è –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –ø–ª–æ—â–∞–¥–∫—É" - –Ω–∞–∂–∞–≤ –Ω–∞ –Ω–µ–µ, –≤—ã —Å–º–æ–∂–µ—Ç–µ –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ —à–∞–≥–æ–≤ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –±–∞—Å–∫–µ—Ç–±–æ–ª—å–Ω—É—é –ø–ª–æ—â–∞–¥–∫—É;\n'
                                  '"üßæ –ü–æ–∫–∞–∑–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è" - –Ω–∞–∂–∞–≤ –Ω–∞ –Ω–µ–µ, –≤–∞–º –±—É–¥–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç\n'
                                  '"üìÜ –ù–∞–∑–Ω–∞—á–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ" - –Ω–∞–∂–∞–≤ –Ω–∞ –Ω–µ–µ, –≤—ã —Å–º–æ–∂–µ—Ç–µ –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ —à–∞–≥–æ–≤ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –±–∞—Å–∫–µ—Ç–±–æ–ª—å–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Å –¥–æ—Å–∫–æ–Ω–∞–ª—å–Ω—ã–º –∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º;\n'
                                  '"‚öíÔ∏è –î–µ–π—Å—Ç–≤–∏—è —Å –∏–≥—Ä–æ–π" - –†–∞–∑–¥–µ–ª —Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è–º–∏ –ø–æ –∏–≥—Ä–∞–º, –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π,\n'
                                  '–¥–ª—è –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∞ –±–∞—Å–∫–µ—Ç–±–æ–ª—å–Ω–æ–π –ø–ª–æ—â–∞–¥–∫–µ;\n'
                                  '"üõ†Ô∏è –î–µ–π—Å—Ç–≤–∏—è —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ–º" - –†–∞–∑–¥–µ–ª —Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è–º–∏ –ø–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º, –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª–µ–π(–∞–¥–º–∏–Ω–æ–≤) –æ–±—ä—è–≤–ª–µ–Ω–∏–π;\n'
                                  '"üóÑÔ∏è –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç" - –†–∞–∑–¥–µ–ª —Å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è;\n'
                                  '"‚öôÔ∏è –¢–µ—Ö. –ü–æ–¥–¥–µ—Ä–∂–∫–∞" - –†–∞–∑–¥–µ–ª —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –∏ –ø–æ–º–æ—â—å—é –ø–æ –±–æ—Ç—É;\n')

    await callback.answer()

@router.callback_query(Text(text='admin_msg'))
async def process_support_dialog(callback: CallbackQuery):
    """

    """
    await callback.message.answer(text='–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –∫–∞–∫–∏–µ-–ª–∏–±–æ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, —Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —ç—Ç–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É:\n'
                                       '@alreadygoat')
    await callback.answer()

@router.message(Command(commands=['contacts']), StateFilter(default_state))
async def process_contacts(message: Message):
    """

    """
    await message.answer(text='–î–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞, –ø–∏—à–∏—Ç–µ –Ω–∞ —ç—Ç—É –ø–æ—á—Ç—É: denis6_4@mail.ru')

@router.message(Command(commands=['contacts']), ~StateFilter(default_state))
async def process_contacts(message: Message):
    """

    """
    await message.answer(text='–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥—Ä—É–≥–æ–≥–æ –¥–µ–π—Ç—Å–≤–∏—è, –∫–æ–º–∞–Ω–¥–∞ "/contacts" –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞!\n\n'
                              '–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É "/cancel"(–Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üè† –ú–µ–Ω—é") –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Å–æ–≥–ª–∞—Å–Ω–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º!')

@router.message(Text(text=['üè† –ú–µ–Ω—é']), StateFilter(default_state))
async def process_go_to_menu(message: Message):
    users_db: dict = {}
    events_db: dict = {}
    admin_events_db: dict = {}
    menu_botton: KeyboardButton = KeyboardButton(text=' üè† –ú–µ–Ω—é')
    keyboard2: ReplyKeyboardMarkup = ReplyKeyboardMarkup(keyboard=[[menu_botton]],
                                                        resize_keybord=True)
    await message.answer_photo(
        photo='https://i.pinimg.com/564x/bc/99/11/bc99116f57ff62dfd621f6b935f64ec3.jpg',
        reply_markup=keyboard2)

    srch_botton: InlineKeyboardButton = InlineKeyboardButton(
        text='‚õπüèø‚Äç‚ôÇÔ∏è –ù–∞–π—Ç–∏ –ø–ª–æ—â–∞–¥–∫—É –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏',
        callback_data='court_search')
    addd_botton: InlineKeyboardButton = InlineKeyboardButton(
        text='üóëÔ∏è –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –ø–ª–æ—â–∞–¥–∫—É',
        callback_data='court_adding')
    prsn_botton: InlineKeyboardButton = InlineKeyboardButton(
        text='üóÑÔ∏è –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç',
        callback_data='personal_area')
    tech_botton: InlineKeyboardButton = InlineKeyboardButton(
        text='‚öôÔ∏è –¢–µ—Ö. –ü–æ–¥–¥–µ—Ä–∂–∫–∞',
        callback_data='tech_setting')
    setevnt_botton: InlineKeyboardButton = InlineKeyboardButton(
        text='üìÜ –ù–∞–∑–Ω–∞—á–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ',
        callback_data='set_event')
    casegame_botton: InlineKeyboardButton = InlineKeyboardButton(
        text='‚öíÔ∏è –î–µ–π—Å—Ç–≤–∏—è —Å –∏–≥—Ä–æ–π',
        callback_data='case_game')
    caseevent_botton: InlineKeyboardButton = InlineKeyboardButton(
        text='üõ†Ô∏è –î–µ–π—Å—Ç–≤–∏—è —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ–º',
        callback_data='case_event')
    search_events_botton: InlineKeyboardButton = InlineKeyboardButton(
        text='üßæ –ü–æ–∫–∞–∑–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è',
        callback_data='search_events')
    keyboard: InlineKeyboardMarkup = InlineKeyboardMarkup(
        inline_keyboard=[[srch_botton],
                         [addd_botton],
                         [search_events_botton],
                         [setevnt_botton],
                         [casegame_botton],
                         [caseevent_botton],
                         [prsn_botton],
                         [tech_botton]])
    await message.answer(
        text='–ù—É –≤–æ—Ç –∏ –≤—Å–µ! –í—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ–±—Ä–∞–Ω–∞, —Å–∏—Å—Ç–µ–º–∞ —É–ª—É—á—à–µ–Ω–∞, —Ä–µ–∑—É–ª—å—Ç–∞—ã —É—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω—ã!\n'
             '–í–æ—Ç —Ç–∞–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ:',
        reply_markup=keyboard)

class AddGame(StatesGroup):
    latitude=State()
    longitude=State()
    result_court_id=State()

@router.message(Text(text=['üè† –ú–µ–Ω—é']), StateFilter(AddGame.result_court_id))
async def process_go_to_menu(message: Message, state: FSMContext):
    users_db: dict = {}
    events_db: dict = {}
    admin_events_db: dict = {}

    court_data = await state.get_data()
    BotDB.exit_player_from_court(message.from_user.id, court_data["result_court_id"])

    menu_botton: KeyboardButton = KeyboardButton(text=' üè† –ú–µ–Ω—é')
    keyboard2: ReplyKeyboardMarkup = ReplyKeyboardMarkup(keyboard=[[menu_botton]],
                                                        resize_keybord=True)
    await message.answer_photo(
        photo='https://i.pinimg.com/564x/bc/99/11/bc99116f57ff62dfd621f6b935f64ec3.jpg',
        reply_markup=keyboard2)

    await state.clear()

    srch_botton: InlineKeyboardButton = InlineKeyboardButton(
        text='‚õπüèø‚Äç‚ôÇÔ∏è –ù–∞–π—Ç–∏ –ø–ª–æ—â–∞–¥–∫—É –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏',
        callback_data='court_search')
    addd_botton: InlineKeyboardButton = InlineKeyboardButton(
        text='üóëÔ∏è –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –ø–ª–æ—â–∞–¥–∫—É',
        callback_data='court_adding')
    prsn_botton: InlineKeyboardButton = InlineKeyboardButton(
        text='üóÑÔ∏è –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç',
        callback_data='personal_area')
    tech_botton: InlineKeyboardButton = InlineKeyboardButton(
        text='‚öôÔ∏è –¢–µ—Ö. –ü–æ–¥–¥–µ—Ä–∂–∫–∞',
        callback_data='tech_setting')
    setevnt_botton: InlineKeyboardButton = InlineKeyboardButton(
        text='üìÜ –ù–∞–∑–Ω–∞—á–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ',
        callback_data='set_event')
    casegame_botton: InlineKeyboardButton = InlineKeyboardButton(
        text='‚öíÔ∏è –î–µ–π—Å—Ç–≤–∏—è —Å –∏–≥—Ä–æ–π',
        callback_data='case_game')
    caseevent_botton: InlineKeyboardButton = InlineKeyboardButton(
        text='üõ†Ô∏è –î–µ–π—Å—Ç–≤–∏—è —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ–º',
        callback_data='case_event')
    search_events_botton: InlineKeyboardButton = InlineKeyboardButton(
        text='üßæ –ü–æ–∫–∞–∑–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è',
        callback_data='search_events')
    keyboard: InlineKeyboardMarkup = InlineKeyboardMarkup(
        inline_keyboard=[[srch_botton],
                         [addd_botton],
                         [search_events_botton],
                         [setevnt_botton],
                         [casegame_botton],
                         [caseevent_botton],
                         [prsn_botton],
                         [tech_botton]])
    await message.answer(
        text='–ù—É –≤–æ—Ç –∏ –≤—Å–µ! –í—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ–±—Ä–∞–Ω–∞, —Å–∏—Å—Ç–µ–º–∞ —É–ª—É—á—à–µ–Ω–∞, —Ä–µ–∑—É–ª—å—Ç–∞—ã —É—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω—ã!\n'
             '–í–æ—Ç —Ç–∞–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ:',
        reply_markup=keyboard)

@router.message(Text(text=['üè† –ú–µ–Ω—é']), ~StateFilter(default_state))
async def process_go_to_menu(message: Message, state: FSMContext):
    users_db: dict = {}
    events_db: dict = {}
    admin_events_db: dict = {}
    menu_botton: KeyboardButton = KeyboardButton(text=' üè† –ú–µ–Ω—é')
    keyboard2: ReplyKeyboardMarkup = ReplyKeyboardMarkup(keyboard=[[menu_botton]],
                                                        resize_keybord=True)
    await message.answer_photo(
        photo='https://i.pinimg.com/564x/bc/99/11/bc99116f57ff62dfd621f6b935f64ec3.jpg',
        reply_markup=keyboard2)

    await state.clear()

    srch_botton: InlineKeyboardButton = InlineKeyboardButton(
        text='‚õπüèø‚Äç‚ôÇÔ∏è –ù–∞–π—Ç–∏ –ø–ª–æ—â–∞–¥–∫—É –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏',
        callback_data='court_search')
    addd_botton: InlineKeyboardButton = InlineKeyboardButton(
        text='üóëÔ∏è –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –ø–ª–æ—â–∞–¥–∫—É',
        callback_data='court_adding')
    prsn_botton: InlineKeyboardButton = InlineKeyboardButton(
        text='üóÑÔ∏è –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç',
        callback_data='personal_area')
    tech_botton: InlineKeyboardButton = InlineKeyboardButton(
        text='‚öôÔ∏è –¢–µ—Ö. –ü–æ–¥–¥–µ—Ä–∂–∫–∞',
        callback_data='tech_setting')
    setevnt_botton: InlineKeyboardButton = InlineKeyboardButton(
        text='üìÜ –ù–∞–∑–Ω–∞—á–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ',
        callback_data='set_event')
    casegame_botton: InlineKeyboardButton = InlineKeyboardButton(
        text='‚öíÔ∏è –î–µ–π—Å—Ç–≤–∏—è —Å –∏–≥—Ä–æ–π',
        callback_data='case_game')
    caseevent_botton: InlineKeyboardButton = InlineKeyboardButton(
        text='üõ†Ô∏è –î–µ–π—Å—Ç–≤–∏—è —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ–º',
        callback_data='case_event')
    search_events_botton: InlineKeyboardButton = InlineKeyboardButton(
        text='üßæ –ü–æ–∫–∞–∑–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è',
        callback_data='search_events')
    keyboard: InlineKeyboardMarkup = InlineKeyboardMarkup(
        inline_keyboard=[[srch_botton],
                         [addd_botton],
                         [search_events_botton],
                         [setevnt_botton],
                         [casegame_botton],
                         [caseevent_botton],
                         [prsn_botton],
                         [tech_botton]])
    await message.answer(
        text='–ù—É –≤–æ—Ç –∏ –≤—Å–µ! –í—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ–±—Ä–∞–Ω–∞, —Å–∏—Å—Ç–µ–º–∞ —É–ª—É—á—à–µ–Ω–∞, —Ä–µ–∑—É–ª—å—Ç–∞—ã —É—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω—ã!\n'
             '–í–æ—Ç —Ç–∞–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ:',
        reply_markup=keyboard)

# –ü–†–û–¶–ï–°–° –î–û–ë–ê–í–õ–ï–ù–ò–Ø –Æ–ó–ï–†–ê
class AddUser(StatesGroup):
    user_id=State()
    username=State()
    game_level=State()
    years_exprs=State()

@router.callback_query(Text(text=['user_registration']))
async def process_user_registration(callback: CallbackQuery, state: FSMContext):
    """
    –•—ç–Ω–¥–ª–µ—Ä
    """
    if (BotDB.user_exists(callback.from_user.id) == False):
        await callback.message.answer(text='–û—Ç–ª–∏—á–Ω–æ! –Ø —Ä–∞–¥, —á—Ç–æ –≤—ã –≥–æ—Ç–æ–≤—ã —Å–æ –º–Ω–æ–π –ø–æ–¥–µ–ª–∏—Ç—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–µ–±–µ,'
                                           '—Ö–æ—Ç—å –∏ –Ω–µ —Å—Ç–æ–ª—å –≤–∞–∂–Ω–æ–π –¥–ª—è –≤–∞—Å,'
                                            '–Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π –¥–ª—è –≤—Å–µ–≥–æ –∫–æ–º—å—é–Ω–∏—Ç–∏!\n'
                                            '–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –ø—Å–µ–≤–¥–æ–Ω–∏–º, –∫–æ—Ç–æ—Ä—ã–π —è –±—É–¥—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º–µ –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞:')
        await state.set_state(AddUser.username)
        await callback.answer()
    else:
        srch_botton: InlineKeyboardButton = InlineKeyboardButton(
            text='‚õπüèø‚Äç‚ôÇÔ∏è –ù–∞–π—Ç–∏ –ø–ª–æ—â–∞–¥–∫—É –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏',
            callback_data='court_search')
        addd_botton: InlineKeyboardButton = InlineKeyboardButton(
            text='üóëÔ∏è –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –ø–ª–æ—â–∞–¥–∫—É',
            callback_data='court_adding')
        prsn_botton: InlineKeyboardButton = InlineKeyboardButton(
            text='üóÑÔ∏è –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç',
            callback_data='personal_area')
        tech_botton: InlineKeyboardButton = InlineKeyboardButton(
            text='‚öôÔ∏è –¢–µ—Ö. –ü–æ–¥–¥–µ—Ä–∂–∫–∞',
            callback_data='tech_setting')
        setevnt_botton: InlineKeyboardButton = InlineKeyboardButton(
            text='üìÜ –ù–∞–∑–Ω–∞—á–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ',
            callback_data='set_event')
        casegame_botton: InlineKeyboardButton = InlineKeyboardButton(
            text='‚öíÔ∏è –î–µ–π—Å—Ç–≤–∏—è —Å –∏–≥—Ä–æ–π',
            callback_data='case_game')
        caseevent_botton: InlineKeyboardButton = InlineKeyboardButton(
            text='üõ†Ô∏è –î–µ–π—Å—Ç–≤–∏—è —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ–º',
            callback_data='case_event')
        search_events_botton: InlineKeyboardButton = InlineKeyboardButton(
            text='üßæ –ü–æ–∫–∞–∑–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è',
            callback_data='search_events')
        keyboard: InlineKeyboardMarkup = InlineKeyboardMarkup(
            inline_keyboard=[[srch_botton],
                             [addd_botton],
                             [search_events_botton],
                             [setevnt_botton],
                             [casegame_botton],
                             [caseevent_botton],
                             [prsn_botton],
                             [tech_botton]])

        await callback.message.edit_text(
            text='–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n'
                 '–í–æ—Ç —Ç–∞–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ:',
            reply_markup=keyboard)
        # await callback.message.answer(
        #     text='–ù—É –≤–æ—Ç –∏ –≤—Å–µ! –í—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ–±—Ä–∞–Ω–∞, —Å–∏—Å—Ç–µ–º–∞ —É–ª—É—á—à–µ–Ω–∞, —Ä–µ–∑—É–ª—å—Ç–∞—ã —É—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω—ã!\n'
        #      '–í–æ—Ç —Ç–∞–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ç–µ–±–µ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ:',
        #     reply_markup=keyboard)
        await callback.answer()

@router.message(StateFilter(AddUser.username))
async def process_add_username(message: Message, state: FSMContext):
    """
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞—Å–∫–µ—Ç–±–æ–ª—å–Ω–æ–π –ø–ª–æ—â–∞–¥–∫–∏ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∞–¥—Ä–µ—Å.
    """
    await state.update_data(user_id=message.from_user.id)
    await state.update_data(username=message.text)

    love_botton: InlineKeyboardButton = InlineKeyboardButton(
        text='–ù–æ–≤–∏—á–æ–∫',
        callback_data='lovely_play')
    middle_botton: InlineKeyboardButton = InlineKeyboardButton(
        text='–õ—é–±–∏—Ç–µ–ª—å',
        callback_data='middle_play')
    extra_botton: InlineKeyboardButton = InlineKeyboardButton(
        text='–ü—Ä–æ—Ñ–∏',
        callback_data='extra_play')
    keyboard: InlineKeyboardMarkup = InlineKeyboardMarkup(
        inline_keyboard=[[love_botton],
                         [middle_botton],
                         [extra_botton]])
    await message.answer(text="–ê —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –∏–≥—Ä—ã –≤ –±–∞—Å–∫–µ—Ç–±–æ–ª:",
                         reply_markup=keyboard)
    await state.set_state(AddUser.game_level)

@router.callback_query(StateFilter(AddUser.game_level), Text(text=['lovely_play', 'middle_play', 'extra_play']))
async def process_add_game_lvl(callback: CallbackQuery, state: FSMContext):
    """
    –•—ç–Ω–∂–ª–µ—Ä .....
    """
    await state.update_data(game_level=callback.data)
    one_botton: InlineKeyboardButton = InlineKeyboardButton(
        text='<= 1 –≥–æ–¥',
        callback_data='one')
    two_botton: InlineKeyboardButton = InlineKeyboardButton(
        text='2 –≥–æ–¥–∞',
        callback_data='two')
    three_botton: InlineKeyboardButton = InlineKeyboardButton(
        text='3 –≥–æ–¥–∞',
        callback_data='three')
    four_botton: InlineKeyboardButton = InlineKeyboardButton(
        text='4 –≥–æ–¥–∞',
        callback_data='four')
    five_botton: InlineKeyboardButton = InlineKeyboardButton(
        text='5 –ª–µ—Ç',
        callback_data='five')
    six_botton: InlineKeyboardButton = InlineKeyboardButton(
        text='6 –ª–µ—Ç',
        callback_data='six')
    seven_botton: InlineKeyboardButton = InlineKeyboardButton(
        text='7 –ª–µ—Ç',
        callback_data='seven')
    eight_botton: InlineKeyboardButton = InlineKeyboardButton(
        text='>= 8 –ª–µ—Ç ',
        callback_data='eight')
    keyboard: InlineKeyboardMarkup = InlineKeyboardMarkup(
        inline_keyboard=[[one_botton],
                         [two_botton],
                         [three_botton],
                         [four_botton],
                         [five_botton],
                         [six_botton],
                         [seven_botton],
                         [eight_botton]])
    await callback.message.edit_text(
        text='–ê —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ, —Å–∫–æ–ª—å–∫–æ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –º–∏—Ä–µ –±–∞—Å–∫–µ—Ç–±–æ–ª–∞:',
        reply_markup=keyboard)
    await state.set_state(AddUser.years_exprs)
    await callback.answer()

@router.callback_query(StateFilter(AddUser.years_exprs), Text(text=['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight']))
async def process_add_years_exp(callback: CallbackQuery, state: FSMContext):
    """
    –•—ç–Ω–¥–ª–µ—Ä
    """
    await state.update_data(years_exprs=callback.data)
    user_data = await state.get_data()
    years = 0

    if (user_data["years_exprs"] == 'one'):
        years = 1
    elif (user_data["years_exprs"] == 'two'):
        years = 2
    elif (user_data["years_exprs"] == 'three'):
        years = 3
    elif (user_data["years_exprs"] == 'four'):
        years = 4
    elif (user_data["years_exprs"] == 'five'):
        years = 5
    elif (user_data["years_exprs"] == 'six'):
        years = 6
    elif (user_data["years_exprs"] == 'seven'):
        years = 7
    else:
        years = 8

    BotDB.add_user(user_data["user_id"], user_data["username"],
                   user_data["game_level"], years)
    await state.clear()

    srch_botton: InlineKeyboardButton = InlineKeyboardButton(
        text='‚õπüèø‚Äç‚ôÇÔ∏è –ù–∞–π—Ç–∏ –ø–ª–æ—â–∞–¥–∫—É –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏',
        callback_data='court_search')
    addd_botton: InlineKeyboardButton = InlineKeyboardButton(
        text='üóëÔ∏è –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –ø–ª–æ—â–∞–¥–∫—É',
        callback_data='court_adding')
    prsn_botton: InlineKeyboardButton = InlineKeyboardButton(
        text='üóÑÔ∏è –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç',
        callback_data='personal_area')
    tech_botton: InlineKeyboardButton = InlineKeyboardButton(
        text='‚öôÔ∏è –¢–µ—Ö. –ü–æ–¥–¥–µ—Ä–∂–∫–∞',
        callback_data='tech_setting')
    setevnt_botton: InlineKeyboardButton = InlineKeyboardButton(
        text='üìÜ –ù–∞–∑–Ω–∞—á–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ',
        callback_data='set_event')
    casegame_botton: InlineKeyboardButton = InlineKeyboardButton(
        text='‚öíÔ∏è –î–µ–π—Å—Ç–≤–∏—è —Å –∏–≥—Ä–æ–π',
        callback_data='case_game')
    caseevent_botton: InlineKeyboardButton = InlineKeyboardButton(
        text='üõ†Ô∏è –î–µ–π—Å—Ç–≤–∏—è —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ–º',
        callback_data='case_event')
    search_events_botton: InlineKeyboardButton = InlineKeyboardButton(
        text='üßæ –ü–æ–∫–∞–∑–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è',
        callback_data='search_events')
    keyboard: InlineKeyboardMarkup = InlineKeyboardMarkup(
        inline_keyboard=[[srch_botton],
                         [addd_botton],
                         [search_events_botton],
                         [setevnt_botton],
                         [casegame_botton],
                         [caseevent_botton],
                         [prsn_botton],
                         [tech_botton]])

    await callback.message.edit_text(
        text='–ù—É –≤–æ—Ç –∏ –≤—Å–µ! –í—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ–±—Ä–∞–Ω–∞, —Å–∏—Å—Ç–µ–º–∞ —É–ª—É—á—à–µ–Ω–∞, —Ä–µ–∑—É–ª—å—Ç–∞—ã —É—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω—ã!\n'
             '–í–æ—Ç —Ç–∞–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ:',
        reply_markup=keyboard)

    await callback.answer()

# –ü–†–û–¶–ï–°–° –û–¢–ö–ê–ó–ê –Æ–ó–ï–†–ê –û–¢ –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò
@router.callback_query(Text(text=['cancel_registration']))
async def process_user_cancel_registration(callback: CallbackQuery):
    """
    –•—ç–Ω–¥–ª–µ—Ä
    """
    srch_botton: InlineKeyboardButton = InlineKeyboardButton(
        text='‚õπüèø‚Äç‚ôÇÔ∏è –ù–∞–π—Ç–∏ –ø–ª–æ—â–∞–¥–∫—É –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏',
        callback_data='court_search')
    addd_botton: InlineKeyboardButton = InlineKeyboardButton(
        text='üóëÔ∏è –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –ø–ª–æ—â–∞–¥–∫—É',
        callback_data='court_adding')
    prsn_botton: InlineKeyboardButton = InlineKeyboardButton(
        text='üóÑÔ∏è –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç',
        callback_data='personal_area')
    tech_botton: InlineKeyboardButton = InlineKeyboardButton(
        text='‚öôÔ∏è –¢–µ—Ö. –ü–æ–¥–¥–µ—Ä–∂–∫–∞',
        callback_data='tech_setting')
    setevnt_botton: InlineKeyboardButton = InlineKeyboardButton(
        text='üìÜ –ù–∞–∑–Ω–∞—á–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ',
        callback_data='set_event')
    casegame_botton: InlineKeyboardButton = InlineKeyboardButton(
        text='‚öíÔ∏è –î–µ–π—Å—Ç–≤–∏—è —Å –∏–≥—Ä–æ–π',
        callback_data='case_game')
    caseevent_botton: InlineKeyboardButton = InlineKeyboardButton(
        text='üõ†Ô∏è –î–µ–π—Å—Ç–≤–∏—è —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ–º',
        callback_data='case_event')
    search_events_botton: InlineKeyboardButton = InlineKeyboardButton(
        text='üßæ –ü–æ–∫–∞–∑–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è',
        callback_data='search_events')
    keyboard: InlineKeyboardMarkup = InlineKeyboardMarkup(
        inline_keyboard=[[srch_botton],
                         [addd_botton],
                         [search_events_botton],
                         [setevnt_botton],
                         [casegame_botton],
                         [caseevent_botton],
                         [prsn_botton],
                         [tech_botton]])
    await callback.message.answer(text='–û—á–µ–Ω—å –∂–∞–ª—å! –ë–µ–∑ —ç—Ç–æ–≥–æ –∏ –Ω–∞–º, –∏ –≤–∞–º –±—É–¥–µ—Ç —Å–ª–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –∏–≥—Ä–æ–∫–æ–≤'
                               '–≤–Ω—É—Ç—Ä–∏ –Ω–∞—à–µ–≥–æ –∫–æ–º—å—é–Ω–∏—Ç–∏, —á—Ç–æ —É—Å–ª–æ–∂–Ω–∏—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∏—Å–∫–∞ –∏–≥—Ä—ã.\n'
                               '–û–¥–∞–Ω–∫–æ, –≤–∞–º –≤—Å–µ –µ—â–µ –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞!\n–ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å:',
                                reply_markup=keyboard)
    await callback.answer()

# –ü–†–û–¶–ï–°–° –î–û–ë–ê–í–õ–ï–ù–ò–Ø –ü–õ–û–©–ê–î–ö–ò
class AddCourt(StatesGroup):
    user_id = State()
    name = State()
    image_id = State()
    address = State()
    latitude = State()
    longitude = State()

@router.callback_query(Text(text=['court_adding']))
async def add_court(callback: CallbackQuery, state: FSMContext):
    """
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –±–∞—Å–∫–µ—Ç–±–æ–ª—å–Ω–æ–π –ø–ª–æ—â–∞–¥–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
    """
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞—Å–∫–µ—Ç–±–æ–ª—å–Ω–æ–π –ø–ª–æ—â–∞–¥–∫–∏(—Ç–æ, —á—Ç–æ –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–ª—É—Ö—É –≤ —É–∑–∫–æ–º –∫—Ä—É–≥—É –∏–≥—Ä–∞—é—â–∏—Ö –ª–∏—Ü):")
    await state.set_state(AddCourt.name)
    await callback.answer()

@router.message(Command(commands=['add_court']), StateFilter(default_state))
async def add_court(message: Message, state: FSMContext):
    """
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –±–∞—Å–∫–µ—Ç–±–æ–ª—å–Ω–æ–π –ø–ª–æ—â–∞–¥–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
    """
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞—Å–∫–µ—Ç–±–æ–ª—å–Ω–æ–π –ø–ª–æ—â–∞–¥–∫–∏(—Ç–æ, —á—Ç–æ –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–ª—É—Ö—É –≤ —É–∑–∫–æ–º –∫—Ä—É–≥—É –∏–≥—Ä–∞—é—â–∏—Ö –ª–∏—Ü):")
    await state.set_state(AddCourt.name)

@router.message(Command(commands=['add_court']), ~StateFilter(default_state))
async def add_court(message: Message, state: FSMContext):
    """
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –±–∞—Å–∫–µ—Ç–±–æ–ª—å–Ω–æ–π –ø–ª–æ—â–∞–¥–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
    """
    await message.answer('–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥—Ä—É–≥–æ–≥–æ –¥–µ–π—Ç—Å–≤–∏—è, –∫–æ–º–∞–Ω–¥–∞ "/add_court" –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞!\n\n'
                         '–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É "/cancel"(–Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üè† –ú–µ–Ω—é") –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Å–æ–≥–ª–∞—Å–Ω–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º!')

@router.message(StateFilter(AddCourt.name))
async def add_court_name(message: Message, state: FSMContext):
    """
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞—Å–∫–µ—Ç–±–æ–ª—å–Ω–æ–π –ø–ª–æ—â–∞–¥–∫–∏ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∞–¥—Ä–µ—Å.
    """
    await state.update_data(user_id=message.from_user.id)
    await state.update_data(name=message.text)

    yes_photo: InlineKeyboardButton = InlineKeyboardButton(
        text='–ú–æ–≥—É –∑–∞–≥—Ä—É–∑–∏—Ç—å',
        callback_data='send_photo')
    not_photo: InlineKeyboardButton = InlineKeyboardButton(
        text='–ù–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏',
        callback_data='notsend_photo')
    keyboard: InlineKeyboardMarkup = InlineKeyboardMarkup(
        inline_keyboard=[[yes_photo],
                         [not_photo]])

    await message.answer("–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø–ª–æ—â–∞–¥–∫–∏?",
                         reply_markup=keyboard)
    await state.set_state(AddCourt.image_id)

# @router.message(StateFilter(AddCourt.name))
# async def warning_not_name(message: Message):
#     """
#     –•—ç–Ω–¥–ª–µ—Ä
#     """
#     await message.answer(text='–¢–æ, —á—Ç–æ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ!\n'
#                               '–í–≤–µ–¥–∏—Ç–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, —Å–æ—Å—Ç–æ—è—â–∏–µ –¢–û–õ–¨–ö–û –∏–∑ –±—É–∫–≤!\n'
#                               '–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ—Ä–≤–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã - '
#                               '–æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /cancel(–Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üè† –ú–µ–Ω—é")')




@router.callback_query(Text(text=['send_photo', 'notsend_photo']), StateFilter(AddCourt.image_id))
async def process_photo_choosing(callback: CallbackQuery, state: FSMContext):
    if (callback.data == 'send_photo'):
        await callback.message.answer('–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å—é–¥–∞ —Ñ–æ—Ç–æ –ø–ª–æ—â–∞–¥–∫–∏:')
    else:
        await state.update_data(image_id="https://i.pinimg.com/564x/a3/d2/16/a3d2164292452e51212a33f7844aab86.jpg")
        await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å, –∫–∞–∫ —É–∫–∞–∑–∞–Ω–æ –≤ –ø—Ä–∏–º–µ—Ä–µ(–ì—Ä–∞–Ω–∏—á–Ω–∞—è —É–ª–∏—Ü–∞, 11/1, –º–∏–∫—Ä–æ—Ä–∞–π–æ–Ω –û–ª—å–≥–∏–Ω–æ, –ë–∞–ª–∞—à–∏—Ö–∞, –ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å):')
        await state.set_state(AddCourt.address)
    await callback.answer()

@router.message(StateFilter(AddCourt.image_id), F.photo[-1].as_('largest_photo'))
async def process_photo_sent(message: Message,
                             state: FSMContext,
                             largest_photo: PhotoSize):
    """
    –•—ç–Ω–∂–ª–µ—Ä
    """
    await state.update_data(image_id=largest_photo.file_id)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å, –∫–∞–∫ —É–∫–∞–∑–∞–Ω–æ –≤ –ø—Ä–∏–º–µ—Ä–µ(–ì—Ä–∞–Ω–∏—á–Ω–∞—è —É–ª–∏—Ü–∞, 11/1, –º–∏–∫—Ä–æ—Ä–∞–π–æ–Ω –û–ª—å–≥–∏–Ω–æ, –ë–∞–ª–∞—à–∏—Ö–∞, –ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å):')
    await state.set_state(AddCourt.address)

@router.message(StateFilter(AddCourt.image_id))
async def warning_not_photo(message: Message):
    """
    as
    """
    await message.answer(text='–ù–∞ —ç—Ç–æ–º —à–∞–≥–µ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '
                              '—Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫!\n'
                              '–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ—Ä–≤–∞—Ç—å '
                              '–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã - –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /cancel(–Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üè† –ú–µ–Ω—é")')

@router.message(StateFilter(AddCourt.address), F.content_type == ContentType.TEXT)
async def add_court_address(message: Message, state: FSMContext):
    """
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∞–¥—Ä–µ—Å –±–∞—Å–∫–µ—Ç–±–æ–ª—å–Ω–æ–π –ø–ª–æ—â–∞–¥–∫–∏ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã.
    """
    await state.update_data(address=message.text)
    geolocation_botton1: KeyboardButton = KeyboardButton(text='üìç –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π',
                                                         request_location=True)
    geolocation_botton3: KeyboardButton = KeyboardButton(text='üó∫Ô∏è –í–≤–µ—Å—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã')
    geolocation_botton4: KeyboardButton = KeyboardButton(text='ü´µüèº –£–∫–∞–∑–∞—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ')
    menu_botton: KeyboardButton = KeyboardButton(text=' üè† –ú–µ–Ω—é')
    keyboard: ReplyKeyboardMarkup = ReplyKeyboardMarkup(keyboard=[[geolocation_botton1],
                                                                  [geolocation_botton3],
                                                                  [geolocation_botton4],
                                                                  [menu_botton]],
                                                        resize_keybord=True,
                                                        one_time_keybord=True)
    await message.answer(
        "–ò –≤ –∑–∞–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ–º —à–∞–≥–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ—Ä—Ç–∞ –Ω–∞–º –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–∞—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–ª–æ–∂–µ–Ω–∏—è –ø–ª–æ—â–∞–¥–∫–∏,\n"
        "–≤—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π –≤–∞–º —Å–ø–æ—Å–æ–± –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫:",
        reply_markup=keyboard)
    await state.set_state(AddCourt.latitude)

@router.message(F.content_type == ContentType.LOCATION, StateFilter(AddCourt.latitude))  # '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π'
async def ad_court_address(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏ –Ω–æ–≤–æ–π –ø–ª–æ—â–∞–¥–∫–∏
    """
    await state.update_data(latitude=message.location.latitude)
    await state.update_data(longitude=message.location.longitude)

    # –ü–†–û–¶–ï–°–° –û–ë–†–ê–©–ï–ù–ò–Ø –ö –ê–ü–ò GEOPY
    ctx = ssl._create_unverified_context(cafile=certifi.where())
    geopy.geocoders.options.default_ssl_context = ctx
    geolocator = Nominatim(user_agent='SetCourt', scheme='https')
    # geolocator = RateLimiter(geolocator.geocode, min_delay_seconds=1)
    # collisions['geocodes'] = collisions['location_string'].apply(geolocator)
    geo_str = str(message.location.latitude) + ", " + str(message.location.longitude)
    location = geolocator.reverse(geo_str)
    await state.update_data(address=location.address)

    user_data = await state.get_data()
    result_id = BotDB.add_court(user_data["user_id"], user_data["name"], user_data["image_id"],
                    user_data["address"], user_data["latitude"], user_data["longitude"])

    await state.clear()

    menu_botton: KeyboardButton = KeyboardButton(text=' üè† –ú–µ–Ω—é')
    keyboard2: ReplyKeyboardMarkup = ReplyKeyboardMarkup(keyboard=[[menu_botton]],
                                                         resize_keybord=True)
    await message.answer(text='–û—Ç–ª–∏—á–Ω–æ! –ü–ª–æ—â–∞–¥–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!',
                         reply_markup=keyboard2)

    if (user_data["image_id"] != user_data["user_id"]):
        await message.answer_photo(
            photo=user_data["image_id"],
            caption=f'–ù–∞–∑–≤–∞–Ω–∏–µ –ø–ª–æ—â–∞–¥–∫–∏: {user_data["name"]}\n\n'
                    f'–ê–¥—Ä–µ—Å –ø–ª–æ—â–∞–¥–∫–∏: {user_data["address"]}\n\n'
                    f'–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –¥–∞–Ω–Ω–æ–π –ø–ª–æ—â–∞–¥–∫–∏:\n'
                    f'{user_data["latitude"]}, {user_data["longitude"]}\n\n',
            reply_murkup=keyboard2)
    else:
        await message.answer(
            text=f'–ù–∞–∑–≤–∞–Ω–∏–µ –ø–ª–æ—â–∞–¥–∫–∏: {user_data["name"]}\n\n'
                 f'–ê–¥—Ä–µ—Å –ø–ª–æ—â–∞–¥–∫–∏: {user_data["address"]}\n\n'
                 f'–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –¥–∞–Ω–Ω–æ–π –ø–ª–æ—â–∞–¥–∫–∏:\n'
                 f'{user_data["latitude"]}, {user_data["longitude"]}\n\n',
            reply_murkup=keyboard2)

@router.message(Text(text=['üó∫Ô∏è –í–≤–µ—Å—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã']), StateFilter(AddCourt.latitude))
async def add_court_address(message: Message, state: FSMContext):
    menu_botton: KeyboardButton = KeyboardButton(text=' üè† –ú–µ–Ω—é')
    keyboard2: ReplyKeyboardMarkup = ReplyKeyboardMarkup(keyboard=[[menu_botton]],
                                                         resize_keybord=True)
    await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–∞–Ω–Ω–æ–≥–æ –∫–æ—Ä—Ç–∞,'
                              '–∫–∞–∫ —É–∫–∞–∑–∞–Ω–æ –≤ –ø—Ä–∏–º–µ—Ä–µ(55.746999, 37.988368)',
                         reply_markup=keyboard2)
    await state.set_state(AddCourt.longitude)


@router.message(StateFilter(AddCourt.longitude), F.content_type == ContentType.TEXT)
async def add_court_coordinates(message: Message, state: FSMContext):
    menu_botton: KeyboardButton = KeyboardButton(text=' üè† –ú–µ–Ω—é')
    keyboard2: ReplyKeyboardMarkup = ReplyKeyboardMarkup(keyboard=[[menu_botton]],
                                                         resize_keybord=True)
    try:
        lat, lng = message.text.split(',')
        lat, lng = float(lat.strip()), float(lng.strip())
        await state.update_data(latitude=lat)
        await state.update_data(longitude=lng)

        # –ü–†–û–¶–ï–°–° –û–ë–†–ê–©–ï–ù–ò–Ø –ö –ê–ü–ò GEOPY
        ctx = ssl._create_unverified_context(cafile=certifi.where())
        geopy.geocoders.options.default_ssl_context = ctx
        geolocator = Nominatim(user_agent='SetCourt', scheme='https')
        # geolocator = RateLimiter(geolocator.geocode, min_delay_seconds=1)
        # collisions['geocodes'] = collisions['location_string'].apply(geolocator)
        geo_str = str(lat) + ", " + str(lng)
        location = geolocator.reverse(geo_str)
        await state.update_data(address=location.address)

        user_data = await state.get_data()
        result_id = BotDB.add_court(user_data["user_id"], user_data["name"], user_data["image_id"],
                                    user_data["address"], user_data["latitude"], user_data["longitude"])

        await state.clear()
        await message.answer(text='–û—Ç–ª–∏—á–Ω–æ! –ü–ª–æ—â–∞–¥–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!')
        if (user_data["image_id"] != user_data["user_id"]):
            await message.answer_photo(
                photo=user_data["image_id"],
                caption=f'–ù–∞–∑–≤–∞–Ω–∏–µ –ø–ª–æ—â–∞–¥–∫–∏: {user_data["name"]}\n\n'
                        f'–ê–¥—Ä–µ—Å –ø–ª–æ—â–∞–¥–∫–∏: {user_data["address"]}\n\n'
                        f'–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –¥–∞–Ω–Ω–æ–π –ø–ª–æ—â–∞–¥–∫–∏:\n'
                        f'{user_data["latitude"]}, {user_data["longitude"]}\n\n',
                reply_murkup=keyboard2)
        else:
            await message.answer(
                text=f'–ù–∞–∑–≤–∞–Ω–∏–µ –ø–ª–æ—â–∞–¥–∫–∏: {user_data["name"]}\n\n'
                     f'–ê–¥—Ä–µ—Å –ø–ª–æ—â–∞–¥–∫–∏: {user_data["address"]}\n\n'
                     f'–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –¥–∞–Ω–Ω–æ–π –ø–ª–æ—â–∞–¥–∫–∏:\n'
                     f'{user_data["latitude"]}, {user_data["longitude"]}\n\n',
                reply_murkup=keyboard2)
        await state.clear()
    except ValueError:
        await message.reply(
            "–ù–µ –≤–∞–ª–∏–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç.\n"
            "–í–≤–µ–¥–∏—Ç–µ –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ: 40.7128, -74.0060")

@router.message(Text(text=['ü´µüèº –£–∫–∞–∑–∞—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ']), StateFilter(AddCourt.latitude))
async def add_court_address(message: Message, state: FSMContext):
    menu_botton: KeyboardButton = KeyboardButton(text=' üè† –ú–µ–Ω—é')
    keyboard2: ReplyKeyboardMarkup = ReplyKeyboardMarkup(keyboard=[[menu_botton]],
                                                         resize_keybord=True)
    await message.answer(
        text='1. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–∫—Ä–µ–ø–∫—É üìé —Ä—è–¥–æ–º —Å –æ–∫–Ω–æ–º –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è.\n'
             '2. –ù–∞–∂–º–∏—Ç–µ "–ì–µ–æ–ø–æ–∑–∏—Ü–∏—è".\n'
             '3. –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ –Ω–∞ –∫–∞—Ä—Ç–µ.\n'
             '4. –ù–∞–∂–º–∏—Ç–µ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é".\n',
        reply_murkup=keyboard2)
    await state.set_state(AddCourt.longitude)

@router.message(F.content_type == ContentType.LOCATION, StateFilter(AddCourt.longitude))  # –Ø –ù–ï –ü–†–û–í–ï–†–Ø–Æ –ü–†–ê–í–ò–õ–¨–ù–û–°–¢–¨ –ê–î–†–ï–°–ê
async def ad_court_address(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏ –Ω–æ–≤–æ–π –ø–ª–æ—â–∞–¥–∫–∏
    """
    await state.update_data(latitude=message.location.latitude)
    await state.update_data(longitude=message.location.longitude)

    # –ü–†–û–¶–ï–°–° –û–ë–†–ê–©–ï–ù–ò–Ø –ö –ê–ü–ò GEOPY
    ctx = ssl._create_unverified_context(cafile=certifi.where())
    geopy.geocoders.options.default_ssl_context = ctx
    geolocator = Nominatim(user_agent='SetCourt', scheme='https')
    # geolocator = RateLimiter(geolocator.geocode, min_delay_seconds=1)
    # collisions['geocodes'] = collisions['location_string'].apply(geolocator)
    geo_str = str(message.location.latitude) + ", " + str(message.location.longitude)
    location = geolocator.reverse(geo_str)
    await state.update_data(address=location.address)

    # print(geo_str)
    # print(location.address)

    user_data = await state.get_data()
    result_id = BotDB.add_court(user_data["user_id"], user_data["name"], user_data["image_id"],
                    user_data["address"], user_data["latitude"], user_data["longitude"])

    await state.clear()

    menu_botton: KeyboardButton = KeyboardButton(text=' üè† –ú–µ–Ω—é')
    keyboard2: ReplyKeyboardMarkup = ReplyKeyboardMarkup(keyboard=[[menu_botton]],
                                                         resize_keybord=True)
    await message.answer(text='–û—Ç–ª–∏—á–Ω–æ! –ü–ª–æ—â–∞–¥–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!',
                         reply_markup=keyboard2)

    await message.answer_photo(
        photo=user_data["image_id"],
        caption=f'–ù–∞–∑–≤–∞–Ω–∏–µ –ø–ª–æ—â–∞–¥–∫–∏: {user_data["name"]}\n\n'
                f'–ê–¥—Ä–µ—Å –ø–ª–æ—â–∞–¥–∫–∏: {user_data["address"]}\n\n'
                f'–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –¥–∞–Ω–Ω–æ–π –ø–ª–æ—â–∞–¥–∫–∏:\n'
                f'{user_data["latitude"]}, {user_data["longitude"]}\n\n',
        reply_murkup=keyboard2)

# –ü–†–û–¶–ï–°–° –ü–û–ò–°–ö–ê –ë–õ–ò–ñ–ê–ô–®–ï–ô –ü–õ–û–©–ê–î–ö–ò
class SearchCourt(StatesGroup):
    event=State()

@router.callback_query(Text(text=['court_search']), StateFilter(default_state))
async def process_search_court(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ ....
    """
    menu_botton: KeyboardButton = KeyboardButton(text=' üè† –ú–µ–Ω—é')
    geolocation_botton: KeyboardButton = KeyboardButton(text='üìç –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π',
                                                        request_location=True)
    geolocation_botton3: KeyboardButton = KeyboardButton(text='üó∫Ô∏è –í–≤–µ—Å—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã')
    geolocation_botton4: KeyboardButton = KeyboardButton(text='ü´µüèº –£–∫–∞–∑–∞—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ')
    keyboard: ReplyKeyboardMarkup = ReplyKeyboardMarkup(keyboard=[[geolocation_botton],
                                                                  [geolocation_botton3],
                                                                  [geolocation_botton4],
                                                                  [menu_botton]],
                                                        resize_keybord=True,
                                                        one_time_keybord=True)
    await callback.message.answer(
        "–î–ª—è –ø–æ–∏—Å–∫–∞ –±–ª–∏–∂–∞–π—à–µ–π –ø–ª–æ—â–∞–¥–∫–∏ –º–Ω–µ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ, –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –∏—Å–∫–∞—Ç—å.\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–µ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π(—Å–æ–æ—Ç–≤–µ—Ç—Å–≤–µ–Ω–Ω–æ –ø–æ–∏—Å–∫ –±—É–¥–µ—Ç –∏–¥—Ç–∏ –æ—Ç –≤–∞—à–µ–≥–æ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è), –∞ —Ç–∞–∫–∂–µ —É–∫–∞–∑–∞—Ç—å —Ç–æ—á–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ, "
        "—É–∫–∞–∑–∞–≤ –Ω–∞ –∫–∞—Ä—Ç–µ –∏–ª–∏ –≤–≤–µ–¥—è –¥–∞–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤—Ä—É—á–Ω—É—é:",
        reply_markup=keyboard)
    await state.set_state(SearchCourt.event)
    await callback.answer()

@router.message(Command(commands=['search_courts']), StateFilter(default_state))
async def process_search_court(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ ....
    """
    menu_botton: KeyboardButton = KeyboardButton(text=' üè† –ú–µ–Ω—é')
    geolocation_botton: KeyboardButton = KeyboardButton(text='üìç –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π',
                                                        request_location=True)
    geolocation_botton3: KeyboardButton = KeyboardButton(text='üó∫Ô∏è –í–≤–µ—Å—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã')
    geolocation_botton4: KeyboardButton = KeyboardButton(text='ü´µüèº –£–∫–∞–∑–∞—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ')
    keyboard: ReplyKeyboardMarkup = ReplyKeyboardMarkup(keyboard=[[geolocation_botton],
                                                                  [geolocation_botton3],
                                                                  [geolocation_botton4],
                                                                  [menu_botton]],
                                                        resize_keybord=True,
                                                        one_time_keybord=True)
    await message.answer(
        text="–î–ª—è –ø–æ–∏—Å–∫–∞ –±–ª–∏–∂–∞–π—à–µ–π –ø–ª–æ—â–∞–¥–∫–∏ –º–Ω–µ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ, –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –∏—Å–∫–∞—Ç—å.\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–µ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π(—Å–æ–æ—Ç–≤–µ—Ç—Å–≤–µ–Ω–Ω–æ –ø–æ–∏—Å–∫ –±—É–¥–µ—Ç –∏–¥—Ç–∏ –æ—Ç –≤–∞—à–µ–≥–æ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è), –∞ —Ç–∞–∫–∂–µ —É–∫–∞–∑–∞—Ç—å —Ç–æ—á–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ, "
        "—É–∫–∞–∑–∞–≤ –Ω–∞ –∫–∞—Ä—Ç–µ –∏–ª–∏ –≤–≤–µ–¥—è –¥–∞–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤—Ä—É—á–Ω—É—é:\n",
        reply_markup=keyboard)
    await state.set_state(SearchCourt.event)

@router.message(Text(text='üó∫Ô∏è –í–≤–µ—Å—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã'), StateFilter(SearchCourt.event))
async def process_coord_point(message: Message, state: FSMContext):
    menu_botton: KeyboardButton = KeyboardButton(text=' üè† –ú–µ–Ω—é')
    keyboard: ReplyKeyboardMarkup = ReplyKeyboardMarkup(keyboard=[[menu_botton]],
                                                        resize_keybord=True)
    await message.answer(text="–í–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–æ–≥–ª–∞—Å–Ω–æ —Ñ–æ—Ä–º–∞—Ç—É: —à–∏—Ä–æ—Ç–∞, –¥–æ–ª–≥–æ—Ç–∞(–∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ: 40.7128, -74.0060)",
                         reply_markup=keyboard)
    await state.set_state(SearchCourt.event)

@router.message(StateFilter(SearchCourt.event), F.content_type == ContentType.TEXT, ~Text(text='ü´µüèº –£–∫–∞–∑–∞—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ'))
async def process_point_on_map(message: Message, state: FSMContext):
    try:
        lat, lng = message.text.split(',')
        lat, lng = float(lat.strip()), float(lng.strip())

        nearest_courts_data = BotDB.get_courts_nearby(lat, lng)
        menu_botton: KeyboardButton = KeyboardButton(text=' üè† –ú–µ–Ω—é')
        keyboard: ReplyKeyboardMarkup = ReplyKeyboardMarkup(keyboard=[[menu_botton]],
                                                            resize_keybord=True)
        if (nearest_courts_data == None or nearest_courts_data == []):
            await message.answer(text='–ü—Ä–æ—à—É –ø—Ä–æ—â–µ–Ω–∏—è, –º–Ω–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–ª–æ—â–∞–¥–æ–∫ –ø–æ –±–ª–∏–∑–æ—Å—Ç–∏!',
                                 reply_markup=keyboard)
            await state.clear()
        else:
            users_db[message.from_user.id] = [[0], nearest_courts_data]
            data = users_db[message.from_user.id][1][users_db[message.from_user.id][0][0]]
            await message.answer_photo(
                photo=data[3],
                caption=f'–ù–∞–∑–≤–∞–Ω–∏–µ –ø–ª–æ—â–∞–¥–∫–∏: {data[2]}\n\n'
                        f'–ê–¥—Ä–µ—Å –ø–ª–æ—â–∞–¥–∫–∏: {data[4]}\n\n'
                        f'–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –¥–∞–Ω–Ω–æ–π –ø–ª–æ—â–∞–¥–∫–∏: {data[5]}, {data[6]}\n\n'
                        f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π –Ω–∞ –¥–∞–Ω–Ω–æ–π –ø–ª–æ—â–∞–¥–∫–µ: {data[7]}\n\n'
                        f'–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç:\n'
                        f'  üü¢ –ù–æ–≤–∏—á–∫–∏: {data[8]}\n\n'
                        f'  üü° –õ—é–∏—Ç–µ–ª–∏: {data[9]}\n\n'
                        f'  üî¥ –ü—Ä–æ—Ñ–∏: {data[10]}\n\n'
                        f'–°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–Ω—è—Ç–∏—è –±–∞—Å–∫–µ—Ç–±–æ–ª–æ–º: {data[11]} –ª–µ—Ç\n\n',
                reply_markup=pagination_kb.create_pagination_keyboard(
                    'backward',
                    f'{users_db[message.from_user.id][0][0] + 1}/{len(users_db[message.from_user.id][1])}',
                    'forward'))
            await state.set_state(SearchCourt.event)

    except ValueError:
        await message.reply(
            "–ù–µ –≤–∞–ª–∏–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ: 40.7128, -74.0060")


@router.message(Text(text='ü´µüèº –£–∫–∞–∑–∞—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ'), StateFilter(SearchCourt.event))
async def process_point_on_map(message: Message, state: FSMContext):
    menu_botton: KeyboardButton = KeyboardButton(text=' üè† –ú–µ–Ω—é')
    keyboard2: ReplyKeyboardMarkup = ReplyKeyboardMarkup(keyboard=[[menu_botton]],
                                                         resize_keybord=True)
    await message.answer(
        text='1. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–∫—Ä–µ–ø–∫—É üìé —Ä—è–¥–æ–º —Å –æ–∫–Ω–æ–º –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è.\n'
             '2. –ù–∞–∂–º–∏—Ç–µ "–ì–µ–æ–ø–æ–∑–∏—Ü–∏—è".\n'
             '3. –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ –Ω–∞ –∫–∞—Ä—Ç–µ.\n'
             '4. –ù–∞–∂–º–∏—Ç–µ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é".\n',
        reply_murkup=keyboard2)
    await state.set_state(SearchCourt.event)


@router.message(F.content_type == ContentType.LOCATION, StateFilter(SearchCourt.event)) # –ú–û–ì –ù–ï –ü–û–õ–£–ß–ò–¢–¨
async def process_get_location(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ ....
    """
    latitude = message.location.latitude
    longitude = message.location.longitude

    nearest_courts_data = BotDB.get_courts_nearby(latitude, longitude)
    menu_botton: KeyboardButton = KeyboardButton(text=' üè† –ú–µ–Ω—é')
    keyboard: ReplyKeyboardMarkup = ReplyKeyboardMarkup(keyboard=[[menu_botton]],
                                                        resize_keybord=True)
    if (nearest_courts_data == None or nearest_courts_data == []):
        await message.answer(text='–ü—Ä–æ—à—É –ø—Ä–æ—â–µ–Ω–∏—è, –º–Ω–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–ª–æ—â–∞–¥–æ–∫ –ø–æ –±–ª–∏–∑–æ—Å—Ç–∏!',
                             reply_markup=keyboard)
        await state.clear()
    else:
        users_db[message.from_user.id] = [[0], nearest_courts_data]
        data = users_db[message.from_user.id][1][users_db[message.from_user.id][0][0]]
        await message.answer_photo(
            photo=data[3],
            caption=f'–ù–∞–∑–≤–∞–Ω–∏–µ –ø–ª–æ—â–∞–¥–∫–∏: {data[2]}\n\n'
                    f'–ê–¥—Ä–µ—Å –ø–ª–æ—â–∞–¥–∫–∏: {data[4]}\n\n'
                    f'–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –¥–∞–Ω–Ω–æ–π –ø–ª–æ—â–∞–¥–∫–∏: {data[5]}, {data[6]}\n\n'
                    f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π –Ω–∞ –¥–∞–Ω–Ω–æ–π –ø–ª–æ—â–∞–¥–∫–µ: {data[7]}\n\n'
                    f'–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç:\n'
                    f'  üü¢ –ù–æ–≤–∏—á–∫–∏: {data[8]}\n\n'
                    f'  üü° –õ—é–∏—Ç–µ–ª–∏: {data[9]}\n\n'
                    f'  üî¥ –ü—Ä–æ—Ñ–∏: {data[10]}\n\n'
                    f'–°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–Ω—è—Ç–∏—è –±–∞—Å–∫–µ—Ç–±–æ–ª–æ–º: {data[11]} –ª–µ—Ç\n\n',
            reply_markup=pagination_kb.create_pagination_keyboard(
                        'backward',
                        f'{users_db[message.from_user.id][0][0] + 1}/{len(users_db[message.from_user.id][1])}',
                        'forward'))
        await state.set_state(SearchCourt.event)

@router.callback_query(Text(text='forward'), StateFilter(SearchCourt.event))
async def process_forward_press(callback: CallbackQuery):
    """
    –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ "–≤–ø–µ—Ä–µ–¥"
    –≤–æ –≤—Ä–µ–º—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º-–∫–Ω–∏–≥–æ–π
    """
    if users_db[callback.from_user.id][0][0] < len(users_db[callback.from_user.id][1]) - 1:
        users_db[callback.from_user.id][0][0] += 1
        data = users_db[callback.from_user.id][1][users_db[callback.from_user.id][0][0]]
        await callback.message.edit_media(
            media=InputMediaPhoto(
                media=data[3],
                caption=f'–ù–∞–∑–≤–∞–Ω–∏–µ –ø–ª–æ—â–∞–¥–∫–∏: {data[2]}\n\n'
                        f'–ê–¥—Ä–µ—Å –ø–ª–æ—â–∞–¥–∫–∏: {data[4]}\n\n'
                        f'–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –¥–∞–Ω–Ω–æ–π –ø–ª–æ—â–∞–¥–∫–∏: {data[5]}, {data[6]}\n\n'
                        f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π –Ω–∞ –¥–∞–Ω–Ω–æ–π –ø–ª–æ—â–∞–¥–∫–µ: {data[7]}\n\n'
                        f'–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç:\n'
                        f'  üü¢ –ù–æ–≤–∏—á–∫–∏: {data[8]}\n\n'
                        f'  üü° –õ—é–∏—Ç–µ–ª–∏: {data[9]}\n\n'
                        f'  üî¥ –ü—Ä–æ—Ñ–∏: {data[10]}\n\n'
                        f'–°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–Ω—è—Ç–∏—è –±–∞—Å–∫–µ—Ç–±–æ–ª–æ–º: {data[11]} –ª–µ—Ç\n\n'),
            reply_markup=pagination_kb.create_pagination_keyboard(
                'backward',
                f'{users_db[callback.from_user.id][0][0] + 1}/{len(users_db[callback.from_user.id][1])}',
                'forward'))
    await callback.answer()

@router.callback_query(Text(text='backward'), StateFilter(SearchCourt.event))
async def process_backward_press(callback: CallbackQuery):
    """
    –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ "–Ω–∞–∑–∞–¥"
    –≤–æ –≤—Ä–µ–º—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º-–∫–Ω–∏–≥–æ–π
    """
    if users_db[callback.from_user.id][0][0] > 0:
        users_db[callback.from_user.id][0][0] -= 1
        data = users_db[callback.from_user.id][1][users_db[callback.from_user.id][0][0]]
        await callback.message.edit_media(
            media=InputMediaPhoto(
                media=data[3],
                caption=f'–ù–∞–∑–≤–∞–Ω–∏–µ –ø–ª–æ—â–∞–¥–∫–∏: {data[2]}\n\n'
                        f'–ê–¥—Ä–µ—Å –ø–ª–æ—â–∞–¥–∫–∏: {data[4]}\n\n'
                        f'–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –¥–∞–Ω–Ω–æ–π –ø–ª–æ—â–∞–¥–∫–∏: {data[5]}, {data[6]}\n\n'
                        f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π –Ω–∞ –¥–∞–Ω–Ω–æ–π –ø–ª–æ—â–∞–¥–∫–µ: {data[7]}\n\n'
                        f'–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç:\n'
                        f'  üü¢ –ù–æ–≤–∏—á–∫–∏: {data[8]}\n\n'
                        f'  üü° –õ—é–∏—Ç–µ–ª–∏: {data[9]}\n\n'
                        f'  üî¥ –ü—Ä–æ—Ñ–∏: {data[10]}\n\n'
                        f'–°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–Ω—è—Ç–∏—è –±–∞—Å–∫–µ—Ç–±–æ–ª–æ–º: {data[11]} –ª–µ—Ç\n\n'),
            reply_markup=pagination_kb.create_pagination_keyboard(
                'backward',
                f'{users_db[callback.from_user.id][0][0] + 1}/{len(users_db[callback.from_user.id][1])}',
                'forward'))
    await callback.answer()

# –ü–†–û–¶–ï–°–° –î–ï–ô–°–¢–í–ò–Ø –° –ò–ì–†–û–ô –ò –ú–ï–†–û–ü–†–ò–Ø–¢–ò–Ø–ú–ò
@router.callback_query(Text(text='case_game'), StateFilter(default_state))
async def process_start_exit_game(callback: Message):
    stgame_botton: InlineKeyboardButton = InlineKeyboardButton(
        text='üèÄ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É',
        callback_data='start_game')
    exgame_botton: InlineKeyboardButton = InlineKeyboardButton(
        text='üôÖüèø‚Äç‚ôÇÔ∏è –ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –∏–≥—Ä—É',
        callback_data='exit_game')
    keyboard: InlineKeyboardMarkup = InlineKeyboardMarkup(
        inline_keyboard=[[stgame_botton],
                         [exgame_botton]])
    await callback.message.answer(
        text='–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ –Ω–∞ –ª—é–±–æ–º –∏–∑ –∫–æ—Ä—Ç–æ–≤, '
             '–∞ —Ç–∞–∫–∂–µ –≤—ã—Ö–æ–¥–∞ –∏–∑ –Ω–µ–µ, –ø—Ä–∏ —É—Å–ª–æ–≤–∏–∏ –µ—Å–ª–∏ –≤—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –Ω–∞ –∫–æ—Ä—Ç–µ:',
        reply_markup=keyboard)
    await callback.answer()

@router.callback_query(Text(text='case_game'), ~StateFilter(default_state))
async def process_start_exit_game(callback: Message):
    await callback.message.answer(
        text='–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥—Ä—É–≥–æ–≥–æ –¥–µ–π—Ç—Å–≤–∏—è, –∫–Ω–æ–ø–∫–∞ "‚öíÔ∏è –î–µ–π—Å—Ç–≤–∏—è —Å –∏–≥—Ä–æ–π" –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞!\n\n'
             '–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É "/cancel"(–Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üè† –ú–µ–Ω—é") –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Å–æ–≥–ª–∞—Å–Ω–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º!')

@router.callback_query(Text(text='case_event'), StateFilter(default_state))
async def process_start_exit_game(callback: Message):
    # set_event_botton: InlineKeyboardButton = InlineKeyboardButton(
    #     text='–ù–∞–∑–Ω–∞—á–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ',
    #     callback_data='set_event')
    start_event_botton: InlineKeyboardButton = InlineKeyboardButton(
        text='üèÄ –ù–∞—á–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ',
        callback_data='start_event')
    exit_event_botton: InlineKeyboardButton = InlineKeyboardButton(
        text='üôÖüèø‚Äç‚ôÇÔ∏è –ó–∞–≤–≤–µ—Ä—à–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ',
        callback_data='exit_event')
    edit_event_botton: InlineKeyboardButton = InlineKeyboardButton(
        text='üîñ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ',
        callback_data='edit_event')
    keyboard: InlineKeyboardMarkup = InlineKeyboardMarkup(
        inline_keyboard=[[start_event_botton],
                         [exit_event_botton],
                         [edit_event_botton]])
    await callback.message.answer(
        text='–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –∑–∞–≤—Ä—à–∏—Ç—å –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ.\n'
             '–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ, –≤—ã–±–æ—Ä –∑–∞ –≤–∞–º–∏.\n'
             '–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–∞—á–Ω–µ—Ç—Å—è —Å–æ–≥–ª–∞—Å–Ω–æ —Ç–æ–π –¥–∞—Ç–µ, –∫–æ—Ç–æ—Ä—É—é –≤—ã —É–∫–∞–∂–∏—Ç–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è:',
        reply_markup=keyboard)

@router.callback_query(Text(text='case_event'), ~StateFilter(default_state))
async def process_start_exit_game(callback: Message):
    await callback.message.answer(
        text='–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥—Ä—É–≥–æ–≥–æ –¥–µ–π—Ç—Å–≤–∏—è, –∫–Ω–æ–ø–∫–∞ "‚öíÔ∏è –î–µ–π—Å—Ç–≤–∏—è —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ–º" –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞!\n\n'
             '–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É "/cancel"(–Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üè† –ú–µ–Ω—é") –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Å–æ–≥–ª–∞—Å–Ω–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º!')

class StartEvent(StatesGroup):
    event=State()

@router.callback_query(Text(text='start_event'), StateFilter(default_state))
async def process_start_event(callback: CallbackQuery, state: FSMContext):
    all_events_by_admin = BotDB.get_all_events_by_admin(callback.from_user.id)
    if (all_events_by_admin == None or all_events_by_admin == []):
        await callback.message.answer(text='–í—ã –¥–æ —ç—Ç–æ–≥–æ –Ω–µ —Å–æ–∑–¥–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è!')
    else:
        admin_events_db[callback.from_user.id] = [[0], all_events_by_admin]
        data = admin_events_db[callback.from_user.id][1][admin_events_db[callback.from_user.id][0][0]]
        player = "üî¥ –ü—Ä–æ—Ñ–∏"
        if (data[4] == 'lovely_play'):
            player = "üü¢ –ù–æ–≤–∏—á–æ–∫"
        elif (data[4] == 'middle_play'):
            player = "üü° –õ—é–±–∏—Ç–µ–ª—å"
        acs = "üîê –ó–∞–∫—Ä—ã—Ç–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ"
        if (data[3] == 'open_event'):
            acs = "üîì –û—Ç–∫—Ä—ã—Ç–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ"
        await callback.message.answer(
            text=f'–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {data[2]}\n\n'
                 f'–ê–¥—Ä–µ—Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {data[5]}\n\n'
                 f'–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –¥–∞–Ω–Ω–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {data[6]}, {data[7]}\n\n'
                 f'–¢—Ä–µ–±—É–µ–º—ã–π —É—Ä–æ–≤–µ–Ω—å: {player}\n\n'
                 f'–î–æ—Å—Ç—É–ø: {acs}\n\n'
                 f'–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {data[8]} {data[9]}\n\n'
                 f'–û–ø–∏—Å–∞–Ω–∏–µ: {data[10]}',
            reply_markup=pagination_kb.create_pagination_keyboard(
                'backwa',
                f'{admin_events_db[callback.from_user.id][0][0] + 1}/{len(admin_events_db[callback.from_user.id][1])}',
                'forwa'))
        await callback.message.answer(text='–í–æ—Ç –≤—Å–µ –±–∞—Å–∫–µ—Ç–±–æ–ª—å–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –≤–∞–º–∏!\n'
                                           '–ù–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ —Ü–µ–Ω—Ç—Ä—É –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –Ω–∞—á–∞—Ç—å –µ–≥–æ!')
        await state.set_state(StartEvent.event)
    await callback.answer()

@router.callback_query(Text(text='forwa'), StateFilter(StartEvent.event))
async def process_forward_press(callback: CallbackQuery, state: FSMContext):
    """
    –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ "–≤–ø–µ—Ä–µ–¥"
    –≤–æ –≤—Ä–µ–º—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º-–∫–Ω–∏–≥–æ–π
    """
    if admin_events_db[callback.from_user.id][0][0] < len(admin_events_db[callback.from_user.id][1]) - 1:
        admin_events_db[callback.from_user.id][0][0] += 1
        data = admin_events_db[callback.from_user.id][1][admin_events_db[callback.from_user.id][0][0]]
        if (data[4] == 'lovely_play'):
            player = "üü¢ –ù–æ–≤–∏—á–æ–∫"
        elif (data[4] == 'middle_play'):
            player = "üü° –õ—é–±–∏—Ç–µ–ª—å"
        acs = "üîê –ó–∞–∫—Ä—ã—Ç–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ"
        if (data[3] == 'open_event'):
            acs = "üîì –û—Ç–∫—Ä—ã—Ç–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ"
        await callback.message.edit_text(
            text=f'–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {data[2]}\n\n'
                              f'–ê–¥—Ä–µ—Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {data[5]}\n\n'
                              f'–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –¥–∞–Ω–Ω–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {data[6]}, {data[7]}\n\n'
                              f'–¢—Ä–µ–±—É–µ–º—ã–π —É—Ä–æ–≤–µ–Ω—å: {player}\n\n'
                              f'–î–æ—Å—Ç—É–ø: {acs}\n\n'
                              f'–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {data[8]} {data[9]}\n\n'
                              f'–û–ø–∏—Å–∞–Ω–∏–µ: {data[10]}',
            reply_markup=pagination_kb.create_pagination_keyboard(
                'backwa',
                f'{admin_events_db[callback.from_user.id][0][0] + 1}/{len(admin_events_db[callback.from_user.id][1])}',
                'forwa'))
        await state.set_state(StartEvent.event)
    await callback.answer()

@router.callback_query(Text(text='backwa'), StateFilter(StartEvent.event))
async def process_backward_press(callback: CallbackQuery, state: FSMContext):
    """
    –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ "–Ω–∞–∑–∞–¥"
    –≤–æ –≤—Ä–µ–º—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º-–∫–Ω–∏–≥–æ–π
    """
    if admin_events_db[callback.from_user.id][0][0] > 0:
        admin_events_db[callback.from_user.id][0][0] -= 1
        data = admin_events_db[callback.from_user.id][1][admin_events_db[callback.from_user.id][0][0]]
        if (data[4] == 'lovely_play'):
            player = "üü¢ –ù–æ–≤–∏—á–æ–∫"
        elif (data[4] == 'middle_play'):
            player = "üü° –õ—é–±–∏—Ç–µ–ª—å"
        acs = "üîê –ó–∞–∫—Ä—ã—Ç–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ"
        if (data[3] == 'open_event'):
            acs = "üîì –û—Ç–∫—Ä—ã—Ç–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ"
        await callback.message.edit_text(
            text=f'–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {data[2]}\n\n'
                              f'–ê–¥—Ä–µ—Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {data[5]}\n\n'
                              f'–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –¥–∞–Ω–Ω–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {data[6]}, {data[7]}\n\n'
                              f'–¢—Ä–µ–±—É–µ–º—ã–π —É—Ä–æ–≤–µ–Ω—å: {player}\n\n'
                              f'–î–æ—Å—Ç—É–ø: {acs}\n\n'
                              f'–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {data[8]} {data[9]}\n\n'
                              f'–û–ø–∏—Å–∞–Ω–∏–µ: {data[10]}',
            reply_markup=pagination_kb.create_pagination_keyboard(
                'backwa',
                f'{admin_events_db[callback.from_user.id][0][0] + 1}/{len(admin_events_db[callback.from_user.id][1])}',
                'forwa'))
        await state.set_state(StartEvent.event)
    await callback.answer()

@router.callback_query(lambda x: '/' in x.data and x.data.replace('/', '').isdigit(), StateFilter(StartEvent.event))
async def process_middle_press(callback: CallbackQuery, state: FSMContext):
    id = admin_events_db[callback.from_user.id][1][admin_events_db[callback.from_user.id][0][0]][0]
    BotDB.set_active_by_id(id)
    await callback.message.answer(text='–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –≤ –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º!')
    await state.clear()
    await callback.answer()

class ExitEvent(StatesGroup):
    event=State()

@router.callback_query(Text(text='exit_event'), StateFilter(default_state))
async def process_finish_event(callback: CallbackQuery, state: FSMContext):
    all_events_by_admin = BotDB.get_all_events_by_admin(callback.from_user.id)
    if (all_events_by_admin == None or all_events_by_admin == []):
        await callback.message.answer(text='–í—ã –¥–æ —ç—Ç–æ–≥–æ –Ω–µ —Å–æ–∑–¥–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è!')
    else:
        admin_events_db[callback.from_user.id] = [[0], all_events_by_admin]
        data = admin_events_db[callback.from_user.id][1][admin_events_db[callback.from_user.id][0][0]]
        player = "üî¥ –ü—Ä–æ—Ñ–∏"
        if (data[4] == 'lovely_play'):
            player = "üü¢ –ù–æ–≤–∏—á–æ–∫"
        elif (data[4] == 'middle_play'):
            player = "üü° –õ—é–±–∏—Ç–µ–ª—å"
        acs = "üîê –ó–∞–∫—Ä—ã—Ç–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ"
        if (data[3] == 'open_event'):
            acs = "üîì –û—Ç–∫—Ä—ã—Ç–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ"
        await callback.message.answer(
            text=f'–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {data[2]}\n\n'
                              f'–ê–¥—Ä–µ—Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {data[5]}\n\n'
                              f'–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –¥–∞–Ω–Ω–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {data[6]}, {data[7]}\n\n'
                              f'–¢—Ä–µ–±—É–µ–º—ã–π —É—Ä–æ–≤–µ–Ω—å: {player}\n\n'
                              f'–î–æ—Å—Ç—É–ø: {acs}\n\n'
                              f'–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {data[8]} {data[9]}\n\n'
                              f'–û–ø–∏—Å–∞–Ω–∏–µ: {data[10]}',
            reply_markup=pagination_kb.create_pagination_keyboard(
                'backwa',
                f'{admin_events_db[callback.from_user.id][0][0] + 1}/{len(admin_events_db[callback.from_user.id][1])}',
                'forwa'))
        await callback.message.answer(text='–í–æ—Ç –≤—Å–µ –±–∞—Å–∫–µ—Ç–±–æ–ª—å–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –≤–∞–º–∏!\n'
                                           '–ù–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ —Ü–µ–Ω—Ç—Ä—É –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å –µ–≥–æ!')
        await state.set_state(ExitEvent.event)
    await callback.answer()

@router.callback_query(Text(text='forwa'), StateFilter(ExitEvent.event))
async def process_forward_press(callback: CallbackQuery, state: FSMContext):
    """
    –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ "–≤–ø–µ—Ä–µ–¥"
    –≤–æ –≤—Ä–µ–º—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º-–∫–Ω–∏–≥–æ–π
    """
    if admin_events_db[callback.from_user.id][0][0] < len(admin_events_db[callback.from_user.id][1]) - 1:
        admin_events_db[callback.from_user.id][0][0] += 1
        data = admin_events_db[callback.from_user.id][1][admin_events_db[callback.from_user.id][0][0]]
        if (data[4] == 'lovely_play'):
            player = "üü¢ –ù–æ–≤–∏—á–æ–∫"
        elif (data[4] == 'middle_play'):
            player = "üü° –õ—é–±–∏—Ç–µ–ª—å"
        acs = "üîê –ó–∞–∫—Ä—ã—Ç–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ"
        if (data[3] == 'open_event'):
            acs = "üîì –û—Ç–∫—Ä—ã—Ç–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ"
        await callback.message.edit_text(
            text=f'–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {data[2]}\n\n'
                              f'–ê–¥—Ä–µ—Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {data[5]}\n\n'
                              f'–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –¥–∞–Ω–Ω–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {data[6]}, {data[7]}\n\n'
                              f'–¢—Ä–µ–±—É–µ–º—ã–π —É—Ä–æ–≤–µ–Ω—å: {player}\n\n'
                              f'–î–æ—Å—Ç—É–ø: {acs}\n\n'
                              f'–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {data[8]} {data[9]}\n\n'
                              f'–û–ø–∏—Å–∞–Ω–∏–µ: {data[10]}',
            reply_markup=pagination_kb.create_pagination_keyboard(
                'backwa',
                f'{admin_events_db[callback.from_user.id][0][0] + 1}/{len(admin_events_db[callback.from_user.id][1])}',
                'forwa'))
        await state.set_state(ExitEvent.event)
    await callback.answer()

@router.callback_query(Text(text='backwa'), StateFilter(ExitEvent.event))
async def process_backward_press(callback: CallbackQuery, state: FSMContext):
    """
    –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ "–Ω–∞–∑–∞–¥"
    –≤–æ –≤—Ä–µ–º—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º-–∫–Ω–∏–≥–æ–π
    """
    if admin_events_db[callback.from_user.id][0][0] > 0:
        admin_events_db[callback.from_user.id][0][0] -= 1
        data = admin_events_db[callback.from_user.id][1][admin_events_db[callback.from_user.id][0][0]]
        if (data[4] == 'lovely_play'):
            player = "üü¢ –ù–æ–≤–∏—á–æ–∫"
        elif (data[4] == 'middle_play'):
            player = "üü° –õ—é–±–∏—Ç–µ–ª—å"
        acs = "üîê –ó–∞–∫—Ä—ã—Ç–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ"
        if (data[3] == 'open_event'):
            acs = "üîì –û—Ç–∫—Ä—ã—Ç–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ"
        await callback.message.edit_text(
            text=f'–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {data[2]}\n\n'
                              f'–ê–¥—Ä–µ—Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {data[5]}\n\n'
                              f'–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –¥–∞–Ω–Ω–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {data[6]}, {data[7]}\n\n'
                              f'–¢—Ä–µ–±—É–µ–º—ã–π —É—Ä–æ–≤–µ–Ω—å: {player}\n\n'
                              f'–î–æ—Å—Ç—É–ø: {acs}\n\n'
                              f'–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {data[8]} {data[9]}\n\n'
                              f'–û–ø–∏—Å–∞–Ω–∏–µ: {data[10]}',
            reply_markup=pagination_kb.create_pagination_keyboard(
                'backwa',
                f'{admin_events_db[callback.from_user.id][0][0] + 1}/{len(admin_events_db[callback.from_user.id][1])}',
                'forwa'))
        await state.set_state(ExitEvent.event)
    await callback.answer()

@router.callback_query(lambda x: '/' in x.data and x.data.replace('/', '').isdigit(), StateFilter(ExitEvent.event))
async def process_middle_press(callback: CallbackQuery, state: FSMContext):
    id = admin_events_db[callback.from_user.id][1][admin_events_db[callback.from_user.id][0][0]][0]
    BotDB.set_disactive_by_id(id)
    await callback.message.answer(text='–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!')
    await state.clear()
    await callback.answer()

class EditEvent(StatesGroup):
    event=State()

@router.callback_query(Text(text='edit_event'), StateFilter(default_state))
async def process_start_event(callback: CallbackQuery, state: FSMContext):
    update_event_botton: InlineKeyboardButton = InlineKeyboardButton(
        text='üßÆ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ',
        callback_data='update_event')
    finish_event_botton: InlineKeyboardButton = InlineKeyboardButton(
        text='üôÖüèø‚Äç‚ôÇÔ∏è –£–¥–∞–ª–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ',
        callback_data='delete_event')

    keyboard: InlineKeyboardMarkup = InlineKeyboardMarkup(
        inline_keyboard=[[update_event_botton],
                         [finish_event_botton]])
    await callback.message.answer(text='–ß—Ç–æ –≤—ã –∂–µ–ª–∞–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –≤ –≤–∞—à–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏?',
                                        reply_markup=keyboard)
    await state.set_state(EditEvent.event)
    await callback.answer()

@router.callback_query(Text(text='update_event'), StateFilter(EditEvent.event))
async def process_edit_event_edit_data(callback: CallbackQuery):
    await callback.answer()

class DeleteEvent(StatesGroup):
    event=State()

@router.callback_query(Text(text='delete_event'))
async def process_edit_event_delete(callback: CallbackQuery, state: FSMContext):
    all_events_by_admin = BotDB.get_all_events_by_admin(callback.from_user.id)
    if (all_events_by_admin == None or all_events_by_admin == []):
        await callback.message.answer(text='–í—ã –¥–æ —ç—Ç–æ–≥–æ –Ω–µ —Å–æ–∑–¥–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è!')
    else:
        admin_events_db[callback.from_user.id] = [[0], all_events_by_admin]
        data = admin_events_db[callback.from_user.id][1][admin_events_db[callback.from_user.id][0][0]]
        player = "üî¥ –ü—Ä–æ—Ñ–∏"
        if (data[4] == 'lovely_play'):
            player = "üü¢ –ù–æ–≤–∏—á–æ–∫"
        elif (data[4] == 'middle_play'):
            player = "üü° –õ—é–±–∏—Ç–µ–ª—å"
        acs = "üîê –ó–∞–∫—Ä—ã—Ç–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ"
        if (data[3] == 'open_event'):
            acs = "üîì –û—Ç–∫—Ä—ã—Ç–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ"
        await callback.message.answer(
            text=f'–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {data[2]}\n\n'
                              f'–ê–¥—Ä–µ—Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {data[5]}\n\n'
                              f'–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –¥–∞–Ω–Ω–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {data[6]}, {data[7]}\n\n'
                              f'–¢—Ä–µ–±—É–µ–º—ã–π —É—Ä–æ–≤–µ–Ω—å: {player}\n\n'
                              f'–î–æ—Å—Ç—É–ø: {acs}\n\n'
                              f'–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {data[8]} {data[9]}\n\n'
                              f'–û–ø–∏—Å–∞–Ω–∏–µ: {data[10]}',
            reply_markup=pagination_kb.create_pagination_keyboard(
                'backw',
                f'{admin_events_db[callback.from_user.id][0][0] + 1}/{len(admin_events_db[callback.from_user.id][1])}',
                'forw'))
        await callback.message.answer(text='–í–æ—Ç –≤—Å–µ –±–∞—Å–∫–µ—Ç–±–æ–ª—å–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –≤–∞–º–∏!\n'
                                           '–ù–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ —Ü–µ–Ω—Ç—Ä—É –≤—ã —Å–º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å, –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ!')
        await state.set_state(DeleteEvent.event)
    await callback.answer()

@router.callback_query(Text(text='forw'), StateFilter(DeleteEvent.event))
async def process_forward_press(callback: CallbackQuery, state: FSMContext):
    """
    –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ "–≤–ø–µ—Ä–µ–¥"
    –≤–æ –≤—Ä–µ–º—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º-–∫–Ω–∏–≥–æ–π
    """
    if admin_events_db[callback.from_user.id][0][0] < len(admin_events_db[callback.from_user.id][1]) - 1:
        admin_events_db[callback.from_user.id][0][0] += 1
        data = admin_events_db[callback.from_user.id][1][admin_events_db[callback.from_user.id][0][0]]
        if (data[4] == 'lovely_play'):
            player = "üü¢ –ù–æ–≤–∏—á–æ–∫"
        elif (data[4] == 'middle_play'):
            player = "üü° –õ—é–±–∏—Ç–µ–ª—å"
        acs = "üîê –ó–∞–∫—Ä—ã—Ç–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ"
        if (data[3] == 'open_event'):
            acs = "üîì –û—Ç–∫—Ä—ã—Ç–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ"
        await callback.message.edit_text(
            text=f'–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {data[2]}\n\n'
                              f'–ê–¥—Ä–µ—Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {data[5]}\n\n'
                              f'–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –¥–∞–Ω–Ω–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {data[6]}, {data[7]}\n\n'
                              f'–¢—Ä–µ–±—É–µ–º—ã–π —É—Ä–æ–≤–µ–Ω—å: {player}\n\n'
                              f'–î–æ—Å—Ç—É–ø: {acs}\n\n'
                              f'–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {data[8]} {data[9]}\n\n'
                              f'–û–ø–∏—Å–∞–Ω–∏–µ: {data[10]}',
            reply_markup=pagination_kb.create_pagination_keyboard(
                'backw',
                f'{admin_events_db[callback.from_user.id][0][0] + 1}/{len(admin_events_db[callback.from_user.id][1])}',
                'forw'))
        await state.set_state(DeleteEvent.event)
    await callback.answer()

@router.callback_query(Text(text='backw'), StateFilter(DeleteEvent.event))
async def process_backward_press(callback: CallbackQuery, state: FSMContext):
    """
    –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ "–Ω–∞–∑–∞–¥"
    –≤–æ –≤—Ä–µ–º—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º-–∫–Ω–∏–≥–æ–π
    """
    if admin_events_db[callback.from_user.id][0][0] > 0:
        admin_events_db[callback.from_user.id][0][0] -= 1
        data = admin_events_db[callback.from_user.id][1][admin_events_db[callback.from_user.id][0][0]]
        if (data[4] == 'lovely_play'):
            player = "üü¢ –ù–æ–≤–∏—á–æ–∫"
        elif (data[4] == 'middle_play'):
            player = "üü° –õ—é–±–∏—Ç–µ–ª—å"
        acs = "üîê –ó–∞–∫—Ä—ã—Ç–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ"
        if (data[3] == 'open_event'):
            acs = "üîì –û—Ç–∫—Ä—ã—Ç–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ"
        await callback.message.edit_text(
            text=f'–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {data[2]}\n\n'
                              f'–ê–¥—Ä–µ—Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {data[5]}\n\n'
                              f'–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –¥–∞–Ω–Ω–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {data[6]}, {data[7]}\n\n'
                              f'–¢—Ä–µ–±—É–µ–º—ã–π —É—Ä–æ–≤–µ–Ω—å: {player}\n\n'
                              f'–î–æ—Å—Ç—É–ø: {acs}\n\n'
                              f'–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {data[8]} {data[9]}\n\n'
                              f'–û–ø–∏—Å–∞–Ω–∏–µ: {data[10]}',
            reply_markup=pagination_kb.create_pagination_keyboard(
                'backw',
                f'{admin_events_db[callback.from_user.id][0][0] + 1}/{len(admin_events_db[callback.from_user.id][1])}',
                'forw'))
        await state.set_state(DeleteEvent.event)
    await callback.answer()

@router.callback_query(lambda x: '/' in x.data and x.data.replace('/', '').isdigit(), StateFilter(DeleteEvent.event))
async def process_page_press(callback: CallbackQuery):
    id = admin_events_db[callback.from_user.id][1][admin_events_db[callback.from_user.id][0][0]][0]
    BotDB.delete_event_by_id(id)
    await callback.message.answer('–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!')
    await callback.answer()

# –ü–†–û–¶–ï–°–° –ó–ê–ü–£–°–ö–ê/–ó–ê–í–ï–†–®–ï–ù–ò–Ø –ê–ö–¢–ò–í–ù–û–ì–û –ë–ê–°–ö–ï–¢–ë–û–õ–¨–ù–û–ì–û –ú–ï–†–û–ü–†–ò–Ø–¢–ò–Ø

@router.callback_query(Text(text=['start_game']), StateFilter(default_state))
async def process_start_game(callback: CallbackQuery, state: FSMContext):
    """
    –•—ç–Ω–¥–ª–µ—Ä
    """
    menu_botton: KeyboardButton = KeyboardButton(text=' üè† –ú–µ–Ω—é')
    geolocation_botton: KeyboardButton = KeyboardButton(text='üìç –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π',
                                                        request_location=True)
    keyboard: ReplyKeyboardMarkup = ReplyKeyboardMarkup(keyboard=[[geolocation_botton],
                                                                  [menu_botton]],
                                                        resize_keybord=True,
                                                        one_time_keybord=True)
    await callback.message.answer('–û—É, –≤—ã —É–∂–µ –¥–æ—à–ª–∏ –¥–æ –ø–ª–æ—â–∞–¥–∫–∏? –≠—Ç–æ –ø—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ, –∞ —Ç–µ–ø–µ—Ä—å –æ—Ç–º–µ—Ç—å—Ç–µ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö,'
                                  '—á—Ç–æ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –Ω–∞ —ç—Ç–æ–º –∫–æ—Ä—Ç–µ, –¥–ª—è —ç—Ç–æ–≥–æ –Ω–∞–¥–æ –ø–æ–¥–µ–ª–∏—Ç—Å—è –≥–µ–æ–ø–æ–∑–∏—Ü–∏–µ–π, —Ç–∞–∫ –∫–∞–∫ –º–Ω–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–Ω–∞—Ç—å, —á—Ç–æ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –Ω–∞ –ø–ª–æ—â–∞–¥–∫–µ:',
                                  reply_markup=keyboard)
    await state.set_state(AddGame.latitude)
    await callback.answer()

@router.message(Command(commands=['start_game']), StateFilter(default_state))
async def process_start_game(message: Message, state: FSMContext):
    """
    –•—ç–Ω–¥–ª–µ—Ä
    """
    menu_botton: KeyboardButton = KeyboardButton(text=' üè† –ú–µ–Ω—é')
    geolocation_botton: KeyboardButton = KeyboardButton(text='üìç –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π',
                                                        request_location=True)
    keyboard: ReplyKeyboardMarkup = ReplyKeyboardMarkup(keyboard=[[geolocation_botton],
                                                                  [menu_botton]],
                                                        resize_keybord=True,
                                                        one_time_keybord=True)
    await message.answer('–û—É, –≤—ã —É–∂–µ –¥–æ—à–ª–∏ –¥–æ –ø–ª–æ—â–∞–¥–∫–∏? –≠—Ç–æ –ø—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ, –∞ —Ç–µ–ø–µ—Ä—å –æ—Ç–º–µ—Ç—å—Ç–µ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö,'
                         '—á—Ç–æ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –Ω–∞ —ç—Ç–æ–º –∫–æ—Ä—Ç–µ, –¥–ª—è —ç—Ç–æ–≥–æ –Ω–∞–¥–æ –ø–æ–¥–µ–ª–∏—Ç—Å—è –≥–µ–æ–ø–æ–∑–∏—Ü–∏–µ–π, —Ç–∞–∫ –∫–∞–∫ –º–Ω–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–Ω–∞—Ç—å, —á—Ç–æ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –Ω–∞ –ø–ª–æ—â–∞–¥–∫–µ:',
                         reply_markup=keyboard)
    await state.set_state(AddGame.latitude)

@router.message(StateFilter(AddGame.latitude))
async def process_set_active(message: Message, state: FSMContext):
    """
    Hendler ...
    """
    await state.update_data(latitude=message.location.latitude)
    await state.update_data(longitude=message.location.longitude)

    user_data = await state.get_data()
    search_result = BotDB.get_nearest_court(user_data["latitude"], user_data["longitude"])
    if (search_result == None):
        await message.answer('–ü–æ –≤—Å–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏, –≤—ã –µ—â–µ –Ω–µ —Ä—è–¥–æ–º —Å –ø–ª–æ—â–∞–¥–∫–æ–π!')
    else:
        await state.update_data(result_court_id=search_result["id"])

        yes_botton: InlineKeyboardButton = InlineKeyboardButton(
            text='–î–∞, —ç—Ç–∞ –ø–ª–æ—â–∞–¥–∫–∞!\n'
                 '–ù–∞—á–∞—Ç—å –∏–≥—Ä—É!',
            callback_data='yes_court')
        not_botton: InlineKeyboardButton = InlineKeyboardButton(
            text='–ù–µ, —ç—Ç–æ –¥—Ä—É–≥–∞—è!',
            callback_data='not_court')

        keyboard: InlineKeyboardMarkup = InlineKeyboardMarkup(
            inline_keyboard=[[yes_botton, not_botton]])

        await message.answer_photo(
            photo=search_result["image_id"],
            caption=f'–ò–º—è –ø–ª–æ—â–∞–¥–∫–∏: {search_result["name"]}\n\n'
                    f'–ê–¥—Ä–µ—Å –ø–ª–æ—â–∞–¥–∫–∏: {search_result["address"]}\n\n'
                    f'–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –¥–∞–Ω–Ω–æ–π –ø–ª–æ—â–∞–¥–∫–∏: {search_result["latitude"]}, {search_result["longitude"]}\n\n'
                    f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π –Ω–∞ –¥–∞–Ω–Ω–æ–π –ø–ª–æ—â–∞–¥–∫–µ: {search_result["players"]}\n\n'
                    f'–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç:\n'
                    f'  üü¢ –ù–æ–≤–∏—á–∫–∏: {search_result["green_player"]}\n\n'
                    f'  üü° –õ—é–∏—Ç–µ–ª–∏: {search_result["yellow_player"]}\n\n'
                    f'  üî¥ –ü—Ä–æ—Ñ–∏: {search_result["red_player"]}\n\n'
                    f'–°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–Ω—è—Ç–∏—è –±–∞—Å–∫–µ—Ç–±–æ–ª–æ–º: {search_result["years"]} –ª–µ—Ç\n\n',
            reply_markup=keyboard)

        await state.set_state(AddGame.result_court_id)

@router.callback_query(Text(text=['yes_court', 'not_court']), StateFilter(AddGame.result_court_id))
async def process_agreeting_court(callback: CallbackQuery, state: FSMContext):
    if (callback.data == ['not_court']):
        await callback.message.answer('–í–∏–¥–∏–º–æ, –≤—ã –∏—Å–∫–∞–ª–∏ –¥—Ä—É–≥–æ–π –∫–æ—Ä—Ç!')
    else:
        court_data = await state.get_data()
        BotDB.add_player_on_court(callback.from_user.id, court_data["result_court_id"])
        await callback.message.answer(text='–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –≤—Å–µ –∑–Ω–∞—é—Ç —á—Ç–æ –≤—ã –Ω–∞ —ç—Ç–æ–π –ø–ª–æ—â–∞–¥–∫–µ!\n'
                                      '–ö–æ–≥–¥–∞ –≤—ã –∑–∞–∫–æ–Ω—á–∏—Ç–µ –∏–≥—Ä–∞—Ç—å, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "üôÖüèø‚Äç‚ôÇÔ∏è –ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –∏–≥—Ä—É" –∏–ª–∏ '
                                      '–≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É "/exit_game", –∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–≥–æ –±–æ—Ç–∞\n')
    await callback.answer()
    # await state.clear()

@router.callback_query(~Text(text=['exit_game']), StateFilter(AddGame.result_court_id))
async def process_exit_game(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer('–í—ã –µ—â–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –Ω–∞ –∏–≥—Ä–µ!')

@router.message(~Command(commands=['exit_game']), StateFilter(AddGame.result_court_id))
async def process_exit_game(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer('–í—ã –µ—â–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –Ω–∞ –∏–≥—Ä–µ!')

@router.callback_query(Text(text=['exit_game']), StateFilter(AddGame.result_court_id))
async def process_exit_game(callback: CallbackQuery, state: FSMContext):
    """
    –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É—á–∞—Å—Ç–∏—è –≤ –±–∞—Å–∫–µ—Ç–±–æ–ª—å–Ω–æ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏
    """
    court_data = await state.get_data()
    BotDB.exit_player_from_court(callback.message.from_user.id, court_data["result_court_id"])
    await callback.message.answer('–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ, —Ç–µ–ø–µ—Ä—å –≤—Å–µ –∑–Ω–∞—é—Ç, —á—Ç–æ –Ω–∞ —ç—Ç–æ–π –ø–ª–æ—â–∞–¥–∫–µ –Ω–∞ –æ–¥–Ω–æ–≥–æ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ —Å—Ç–∞–ª–æ –º–µ–Ω—å—à–µ!')
    await state.clear()
    await callback.answer()

@router.message(Command(commands=['exit_game']), StateFilter(AddGame.result_court_id))
async def process_exit_game(message: Message, state: FSMContext):
    """
    –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É—á–∞—Å—Ç–∏—è –≤ –±–∞—Å–∫–µ—Ç–±–æ–ª—å–Ω–æ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏
    """
    court_data = await state.get_data()
    BotDB.exit_player_from_court(message.from_user.id, court_data["result_court_id"])
    await message.answer('–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ, —Ç–µ–ø–µ—Ä—å –≤—Å–µ –∑–Ω–∞—é—Ç, —á—Ç–æ –Ω–∞ —ç—Ç–æ–π –ø–ª–æ—â–∞–¥–∫–µ –Ω–∞ –æ–¥–Ω–æ–≥–æ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ —Å—Ç–∞–ª–æ –º–µ–Ω—å—à–µ!')
    await state.clear()

@router.callback_query(Text(text=['exit_game']), ~StateFilter(AddGame.result_court_id))
async def cannot_exit_game(callback: CallbackQuery):
    await callback.message.answer('–í—ã –µ—â–µ –Ω–µ –Ω–∞—á–∏–Ω–∞–ª–∏ –∏–≥—Ä–∞—Ç—å!\n'
                                  '–í–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–Ω–æ–ø–∫–æ–π "üèÄ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É"(–∏–ª–∏ –∫–æ–º–∞–Ω–¥–æ–π /start_game)')
    await callback.answer()

@router.message(Command(commands=['exit_game']), ~StateFilter(AddGame.result_court_id))
async def cannot_exit_game(message: Message):
    await message.answer('–í—ã –µ—â–µ –Ω–µ –Ω–∞—á–∏–Ω–∞–ª–∏ –∏–≥—Ä–∞—Ç—å!\n'
                         '–í–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–Ω–æ–ø–∫–æ–π "üèÄ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É"(–∏–ª–∏ –∫–æ–º–∞–Ω–¥–æ–π /start_game)')

# –ü–†–û–¶–ï–°–° –õ–ò–ß–ù–û–ì–û –ö–ê–ë–ò–ù–ï–¢–ê
@router.callback_query(Text(text=['personal_area']), StateFilter(default_state))
async def open_personal_area(callback: CallbackQuery):
    if (BotDB.user_exists(callback.from_user.id) != False):
        # favcourts_botton: InlineKeyboardButton = InlineKeyboardButton(
        #     text=' ‚ù§Ô∏é –ú–æ–∏ –ø–ª–æ—â–∞–¥–∫–∏',
        #     callback_data='courts_me')
        # review_botton: InlineKeyboardButton = InlineKeyboardButton(
        #     text=' üìú –ú–æ–∏ –æ—Ç–∑—ã–≤—ã',
        #     callback_data='review_me')
        area_botton: InlineKeyboardButton = InlineKeyboardButton(
            text=' üôçüèø‚Äç‚ôÇÔ∏è –ü—Ä–æ—Ñ–∏–ª—å',
            callback_data='personal_me')
        keyboard: InlineKeyboardMarkup = InlineKeyboardMarkup(
            inline_keyboard=[[area_botton]])  # [favcourts_botton] [review_botton]
        await callback.message.answer(
            text='–í–∞—à –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç:',
            reply_markup=keyboard)
    else:
        reg_botton: InlineKeyboardButton = InlineKeyboardButton(
            text='ü§ùüèº –ü–æ–∑–Ω–∞–∫–æ–º–∏—Ç—Å—è',
            callback_data='user_registration')
        canc_botton: InlineKeyboardButton = InlineKeyboardButton(
            text='üôÖüèΩ –û—Ç–º–µ–Ω–∞',
            callback_data='cancel_registration')
        keyboard: InlineKeyboardMarkup = InlineKeyboardMarkup(
            inline_keyboard=[[reg_botton, canc_botton]])
        await callback.message.answer(text='–í—ã –µ—â–µ –Ω–µ –ø—Ä–æ—à–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!\n'
                                           '–ñ–µ–ª–∞–µ—Ç–µ –ø—Ä–æ–π—Ç–∏?',
                                      reply_markup=keyboard)
    await callback.answer()

@router.callback_query(Text(text=['personal_area']), ~StateFilter(default_state))
async def open_personal_area(callback: CallbackQuery):
    await callback.message.answer('–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è! –í—ã–π–¥–∏—Ç–µ –≤ –º–µ–Ω—é –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ!')
    await callback.answer()

@router.callback_query(Text(text=['personal_me']), StateFilter(default_state))
async def open_profil(callback: CallbackQuery):
    about_botton: InlineKeyboardButton = InlineKeyboardButton(
        text='–û–±–æ –º–Ω–µ',
        callback_data='about_me')
    social_botton: InlineKeyboardButton = InlineKeyboardButton(
        text='–°–æ—Ü. —Å–µ—Ç–∏',
        callback_data='social_me')
    number_botton: InlineKeyboardButton = InlineKeyboardButton(
        text='–¢–µ–ª–µ—Ñ–æ–Ω',
        callback_data='number_me')
    photo_botton: InlineKeyboardButton = InlineKeyboardButton(
        text='–§–æ—Ç–æ',
        callback_data='photo_me')

    keyboard: InlineKeyboardMarkup = InlineKeyboardMarkup(
        inline_keyboard=[[about_botton],
                         [social_botton],
                         [number_botton],
                         [photo_botton]])
    await callback.message.answer(
        text='–í–∞—à –ª–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:',
        reply_markup=keyboard)

    await callback.answer()


# –ü–†–û–¶–ï–°–° –ù–ê–ó–ù–ê–ß–ï–ù–ò–Ø –ë–ê–°–ö–ï–¢–ë–û–õ–¨–ù–û–ì–û –ú–ï–†–û–ü–†–ò–Ø–¢–ò–Ø –ù–ê –û–ü–†–ï–î–ï–õ–ï–ù–ù–£–Æ –î–ê–¢–£
class AddEvent(StatesGroup):
    admin_id=State()
    eventname=State()
    acsess=State()
    levels=State()
    address=State()
    latitude=State()
    longitude=State()
    date=State()
    time=State()
    description=State()

@router.message(Command(commands=['set_event']), StateFilter(default_state))
async def process_set_event(message: Message, state: FSMContext):
    """

    """
    await message.answer(text='–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–∞–∑–Ω–∞—á–∏—Ç—å –±–∞—Å–∫–µ—Ç–±–æ–ª—å–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ, –º–Ω–µ –æ—Ç –≤–∞—Å –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è '
                              '—É—Ç–æ—á–Ω—è—é—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–º, –≥–¥–µ –±—É–¥–µ—Ç –ø—Ä–æ–≤–æ–¥–∏—Ç—å—Å—è, –∫–æ–≥–¥–∞ –∏ –∫–∞–∫–æ–π —Å—Ç–∞—Ç—É—Å!')
    await message.answer(text='–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Å–≤–æ–µ–≥–æ –±–∞—Å–∫—Ç–±–æ–ª—å–Ω–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—Ç—è–∏—è:')
    await state.set_state(AddEvent.eventname)

@router.callback_query(Text(text=['set_event']), StateFilter(default_state))
async def process_set_event(callback: CallbackQuery, state: FSMContext):
    """

    """
    await callback.message.answer(text='–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–∞–∑–Ω–∞—á–∏—Ç—å –±–∞—Å–∫–µ—Ç–±–æ–ª—å–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ, –º–Ω–µ –æ—Ç –≤–∞—Å –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è '
                                       '—É—Ç–æ—á–Ω—è—é—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–º, –≥–¥–µ –±—É–¥–µ—Ç –ø—Ä–æ–≤–æ–¥–∏—Ç—å—Å—è, –∫–æ–≥–¥–∞ –∏ –∫–∞–∫–æ–π —Å—Ç–∞—Ç—É—Å!')
    await callback.message.answer(text='–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Å–≤–æ–µ–≥–æ –±–∞—Å–∫—Ç–±–æ–ª—å–Ω–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—Ç—è–∏—è:')
    await state.set_state(AddEvent.eventname)
    await callback.answer()

@router.message(StateFilter(AddEvent.eventname), F.text.isalpha())
async def process_name_event(message: Message, state: FSMContext):
    await state.update_data(admin_id=message.from_user.id)
    await state.update_data(eventname=message.text)

    open_event_botton: InlineKeyboardButton = InlineKeyboardButton(
        text='üîì –û—Ç–∫—Ä—ã—Ç–æ–µ!',
        callback_data='open_event')
    close_event_botton: InlineKeyboardButton = InlineKeyboardButton(
        text='üîê –ó–∞–∫—Ä—ã—Ç–æ–µ!',
        callback_data='close_event')

    keyboard: InlineKeyboardMarkup = InlineKeyboardMarkup(
        inline_keyboard=[[open_event_botton, close_event_botton]])

    await message.answer(text='–≠—Ç–æ –∑–∞–∫—Ä—ã—Ç–æ–µ –∏–ª–∏ –æ—Ç–∫—Ä—ã—Ç–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:',
                         reply_markup=keyboard)
    await state.set_state(AddEvent.acsess)

@router.message(StateFilter(AddEvent.eventname))
async def process_name_event(message: Message, state: FSMContext):
    await message.answer('–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¢–û–õ–¨–ö–û –±—É–∫–≤–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã!')


@router.callback_query(Text(text=['open_event', 'close_event']), StateFilter(AddEvent.acsess))
async def process_acsess_event(callback: CallbackQuery, state: FSMContext):
    await state.update_data(acsess=callback.data)

    love_botton: InlineKeyboardButton = InlineKeyboardButton(
        text='–ù–æ–≤–∏—á–æ–∫',
        callback_data='lovely_play')
    middle_botton: InlineKeyboardButton = InlineKeyboardButton(
        text='–õ—é–±–∏—Ç–µ–ª—å',
        callback_data='middle_play')
    extra_botton: InlineKeyboardButton = InlineKeyboardButton(
        text='–ü—Ä–æ—Ñ–∏',
        callback_data='extra_play')
    keyboard: InlineKeyboardMarkup = InlineKeyboardMarkup(
        inline_keyboard=[[love_botton],
                         [middle_botton],
                         [extra_botton]])

    await callback.message.answer(text='–î–æ–ø—É—Å—Ç–∏–º—ã–π —É—Ä–æ–≤–µ–Ω—å –∏–≥—Ä–æ–∫–æ–≤:',
                                  reply_markup=keyboard)
    await state.set_state(AddEvent.levels)
    await callback.answer()

@router.callback_query(Text(text=['lovely_play', 'middle_play', 'extra_play']), StateFilter(AddEvent.levels))
async def process_levels_event(callback: CallbackQuery, state: FSMContext):
    await state.update_data(levels=callback.data)

    geolocation_botton1: KeyboardButton = KeyboardButton(text='üìç –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π',
                                                         request_location=True)
    geolocation_botton3: KeyboardButton = KeyboardButton(text='üó∫Ô∏è –í–≤–µ—Å—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã')
    geolocation_botton4: KeyboardButton = KeyboardButton(text='ü´µüèº –£–∫–∞–∑–∞—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ')
    menu_botton: KeyboardButton = KeyboardButton(text=' üè† –ú–µ–Ω—é')
    keyboard: ReplyKeyboardMarkup = ReplyKeyboardMarkup(keyboard=[[geolocation_botton1],
                                                                  [geolocation_botton3],
                                                                  [geolocation_botton4],
                                                                  [menu_botton]],
                                                        resize_keybord=True,
                                                        one_time_keybord=True)
    await callback.message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –±—É–¥—É—â–µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è —ç—Ç–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è üëáüèª',
                                  reply_markup=keyboard)
    await state.set_state(AddEvent.address)
    await callback.answer()

@router.message(F.content_type == ContentType.LOCATION, StateFilter(AddEvent.address))
async def ad_court_address(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏ –Ω–æ–≤–æ–π –ø–ª–æ—â–∞–¥–∫–∏
    """
    await state.update_data(latitude=message.location.latitude)
    await state.update_data(longitude=message.location.longitude)

    # API NAMINATIM GEOPY
    ctx = ssl._create_unverified_context(cafile=certifi.where())
    geopy.geocoders.options.default_ssl_context = ctx
    geolocator = Nominatim(user_agent='SetCourt', scheme='https')
    geo_str = str(message.location.latitude) + ", " + str(message.location.longitude)
    location = geolocator.reverse(geo_str)

    await state.update_data(address=location.address)

    menu_botton: KeyboardButton = KeyboardButton(text=' üè† –ú–µ–Ω—é')
    keyboard2: ReplyKeyboardMarkup = ReplyKeyboardMarkup(keyboard=[[menu_botton]],
                                                         resize_keybord=True)
    await message.answer(text='–ù–∞–ø–∏—à–∏—Ç–µ –¥–∞—Ç—É –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ: 12.01.1965(–¥–µ–Ω—å.–º–µ—Å—è—Ü.–≥–æ–¥)',
                         reply_markup=keyboard2)
    await state.set_state(AddEvent.date)

@router.message(Text(text='üó∫Ô∏è –í–≤–µ—Å—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã'), StateFilter(AddEvent.address))
async def add_court_address(message: Message, state: FSMContext):
    menu_botton: KeyboardButton = KeyboardButton(text=' üè† –ú–µ–Ω—é')
    keyboard2: ReplyKeyboardMarkup = ReplyKeyboardMarkup(keyboard=[[menu_botton]],
                                                         resize_keybord=True)
    await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–∞–Ω–Ω–æ–≥–æ –∫–æ—Ä—Ç–∞,'
                              '–∫–∞–∫ —É–∫–∞–∑–∞–Ω–æ –≤ –ø—Ä–∏–º–µ—Ä–µ: 55.746999, 37.988368 (—à–∏—Ä–æ—Ç–∞, –¥–æ–ª–≥–æ—Ç–∞)',
                         reply_markup=keyboard2)
    await state.set_state(AddEvent.latitude)

@router.message(StateFilter(AddEvent.latitude), F.content_type == ContentType.TEXT)
async def add_court_coordinates(message: Message, state: FSMContext):
    menu_botton: KeyboardButton = KeyboardButton(text=' üè† –ú–µ–Ω—é')
    keyboard2: ReplyKeyboardMarkup = ReplyKeyboardMarkup(keyboard=[[menu_botton]],
                                                         resize_keybord=True)
    try:
        lat, lng = message.text.split(',')
        lat, lng = float(lat.strip()), float(lng.strip())
        await state.update_data(latitude=lat)
        await state.update_data(longitude=lng)

        ctx = ssl._create_unverified_context(cafile=certifi.where())
        geopy.geocoders.options.default_ssl_context = ctx
        geolocator = Nominatim(user_agent='SetCourt', scheme='https')
        geo_str = str(message.location.latitude) + ", " + str(message.location.longitude)
        location = geolocator.reverse(geo_str)

        await state.update_data(address=location.address)

        await message.answer(text='–ù–∞–ø–∏—à–∏—Ç–µ –¥–∞—Ç—É –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ: 12.01.1965 (–¥–µ–Ω—å.–º–µ—Å—è—Ü.–≥–æ–¥)',
                             reply_markup=keyboard2)

        await state.set_state(AddEvent.date)

    except ValueError:
        await message.reply(
            "–ù–µ –≤–∞–ª–∏–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ: 40.7128, -74.0060")

@router.message(Text(text='ü´µüèº –£–∫–∞–∑–∞—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ'), StateFilter(AddEvent.address))
async def add_court_address(message: Message, state: FSMContext):
    menu_botton: KeyboardButton = KeyboardButton(text=' üè† –ú–µ–Ω—é')
    keyboard2: ReplyKeyboardMarkup = ReplyKeyboardMarkup(keyboard=[[menu_botton]],
                                                         resize_keybord=True)
    await message.answer(
        text='1. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–∫—Ä–µ–ø–∫—É üìé —Ä—è–¥–æ–º —Å –æ–∫–Ω–æ–º –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è.\n'
             '2. –ù–∞–∂–º–∏—Ç–µ "–ì–µ–æ–ø–æ–∑–∏—Ü–∏—è".\n'
             '3. –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ –Ω–∞ –∫–∞—Ä—Ç–µ.\n'
             '4. –ù–∞–∂–º–∏—Ç–µ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é".\n',
        reply_murkup=keyboard2)
    await state.set_state(AddEvent.longitude)

@router.message(F.content_type == ContentType.LOCATION, StateFilter(AddEvent.longitude))  # –Ø –ù–ï –ü–†–û–í–ï–†–Ø–Æ –ü–†–ê–í–ò–õ–¨–ù–û–°–¢–¨ –ê–î–†–ï–°–ê
async def ad_court_address(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏ –Ω–æ–≤–æ–π –ø–ª–æ—â–∞–¥–∫–∏
    """
    await state.update_data(latitude=message.location.latitude)
    await state.update_data(longitude=message.location.longitude)

    # –ü–†–û–¶–ï–°–° –û–ë–†–ê–©–ï–ù–ò–Ø –ö –ê–ü–ò GEOPY
    ctx = ssl._create_unverified_context(cafile=certifi.where())
    geopy.geocoders.options.default_ssl_context = ctx
    geolocator = Nominatim(user_agent='SetCourt', scheme='https')
    # geolocator = RateLimiter(geolocator.geocode, min_delay_seconds=1)
    # collisions['geocodes'] = collisions['location_string'].apply(geolocator)
    geo_str = str(message.location.latitude) + ", " + str(message.location.longitude)
    location = geolocator.reverse(geo_str)

    await state.update_data(address=location.address)

    menu_botton: KeyboardButton = KeyboardButton(text=' üè† –ú–µ–Ω—é')
    keyboard2: ReplyKeyboardMarkup = ReplyKeyboardMarkup(keyboard=[[menu_botton]],
                                                         resize_keybord=True)

    await message.answer(text='–ù–∞–ø–∏—à–∏—Ç–µ –¥–∞—Ç—É –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ: 12.01.1965 (–¥–µ–Ω—å.–º–µ—Å—è—Ü.–≥–æ–¥)',
                         reply_markup=keyboard2)
    await state.set_state(AddEvent.date)

@router.message(StateFilter(AddEvent.date))
async def add_data_event(message: Message, state: FSMContext):
    await state.update_data(date=message.text)

    await message.answer(text='–ù–∞–ø–∏—à–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∫–∞–∫ —É–∫–∞–∑–∞–Ω–æ –≤ –ø—Ä–∏–º–µ—Ä–µ: 12:00 –∏–ª–∏ 18:45')
    await state.set_state(AddEvent.time)

@router.message(StateFilter(AddEvent.time))
async def add_time_event(message: Message, state: FSMContext):
    await state.update_data(time=message.text)

    await message.answer(text='–ù–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫ —Å–≤–æ–µ–º—É –±–∞—Å–∫–µ—Ç–±–æ–ª—å–Ω–æ–º—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é:')
    await state.set_state(AddEvent.description)

@router.message(StateFilter(AddEvent.description), F.content_type == ContentType.TEXT)
async def add_description_event(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    user_data = await state.get_data()
    BotDB.add_basketball_event(user_data["admin_id"],
                               user_data["eventname"],
                               user_data["acsess"],
                               user_data["levels"],
                               user_data["address"],
                               user_data["latitude"],
                               user_data["longitude"],
                               user_data["date"],
                               user_data["time"],
                               user_data["description"])
    await message.answer(text='–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ')
    player = "üî¥ –ü—Ä–æ—Ñ–∏"
    if (user_data["levels"] == 'lovely_play'):
        player = "üü¢ –ù–æ–≤–∏—á–æ–∫"
    elif (user_data["levels"] == 'middle_play'):
        player = "üü° –õ—é–±–∏—Ç–µ–ª—å"
    acs = "üîê –ó–∞–∫—Ä—ã—Ç–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ"
    if (user_data["acsess"] == 'open_event'):
        acs = "üîì –û—Ç–∫—Ä—ã—Ç–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ"
    await message.answer(text=f'–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {user_data["eventname"]}\n\n'
                              f'–ê–¥—Ä–µ—Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {user_data["address"]}\n\n'
                              f'–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –¥–∞–Ω–Ω–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {user_data["latitude"]}, {user_data["longitude"]}\n\n'
                              f'–¢—Ä–µ–±—É–µ–º—ã–π —É—Ä–æ–≤–µ–Ω—å: {player}\n\n'
                              f'–î–æ—Å—Ç—É–ø: {acs}\n\n'
                              f'–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {user_data["date"]} {user_data["time"]}\n\n'
                              f'–û–ø–∏—Å–∞–Ω–∏–µ: {user_data["description"]}')
    await state.clear()

# –ü–†–û–¶–ï–°–° –ü–û–ò–°–ö–ê –ú–ï–†–û–ü–†–ò–Ø–¢–ò–ô
class SearchEvents(StatesGroup):
    event=State()

@router.callback_query(Text(text='search_events'), StateFilter(default_state))
async def get_events(callback: CallbackQuery, state: FSMContext):
    all_events = BotDB.get_all_events()
    if (all_events != []):
        events_db[callback.from_user.id] = [[0], all_events]
        data = events_db[callback.from_user.id][1][events_db[callback.from_user.id][0][0]]
        player = "üî¥ –ü—Ä–æ—Ñ–∏"
        if (data[4] == 'lovely_play'):
            player = "üü¢ –ù–æ–≤–∏—á–æ–∫"
        elif (data[4] == 'middle_play'):
            player = "üü° –õ—é–±–∏—Ç–µ–ª—å"
        acs = "üîê –ó–∞–∫—Ä—ã—Ç–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ"
        if (data[3] == 'open_event'):
            acs = "üîì –û—Ç–∫—Ä—ã—Ç–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ"
        await callback.message.answer(
            text=f'–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {data[2]}\n\n'
                                  f'–ê–¥—Ä–µ—Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {data[5]}\n\n'
                                  f'–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –¥–∞–Ω–Ω–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {data[6]}, {data[7]}\n\n'
                                  f'–¢—Ä–µ–±—É–µ–º—ã–π —É—Ä–æ–≤–µ–Ω—å: {player}\n\n'
                                  f'–î–æ—Å—Ç—É–ø: {acs}\n\n'
                                  f'–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {data[8]} {data[9]}\n\n'
                                  f'–û–ø–∏—Å–∞–Ω–∏–µ: {data[10]}',
            reply_markup=pagination_kb.create_pagination_keyboard(
                'backwar',
                f'{events_db[callback.from_user.id][0][0] + 1}/{len(events_db[callback.from_user.id][1])}',
                'forwar'))
        await callback.message.answer(text='–ù–∞–∂–∞–≤ –Ω–∞ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—É—é –∫–Ω–æ–ø–∫—É –≤—ã —Å–º–æ–∂–µ—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ!')
        await state.set_state(SearchEvents.event)
    else:
        await callback.message.answer('–ò–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç!')
    await callback.answer()

@router.callback_query(Text(text='forwar'), StateFilter(SearchEvents.event))
async def process_forward_press(callback: CallbackQuery, state: FSMContext):
    """
    –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ "–≤–ø–µ—Ä–µ–¥"
    –≤–æ –≤—Ä–µ–º—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º-–∫–Ω–∏–≥–æ–π
    """
    if events_db[callback.from_user.id][0][0] < len(events_db[callback.from_user.id][1]) - 1:
        events_db[callback.from_user.id][0][0] += 1
        data = events_db[callback.from_user.id][1][events_db[callback.from_user.id][0][0]]
        if (data[4] == 'lovely_play'):
            player = "üü¢ –ù–æ–≤–∏—á–æ–∫"
        elif (data[4] == 'middle_play'):
            player = "üü° –õ—é–±–∏—Ç–µ–ª—å"
        acs = "üîê –ó–∞–∫—Ä—ã—Ç–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ"
        if (data[3] == 'open_event'):
            acs = "üîì –û—Ç–∫—Ä—ã—Ç–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ"
        await callback.message.edit_text(
            text=f'–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {data[2]}\n\n'
                                  f'–ê–¥—Ä–µ—Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {data[5]}\n\n'
                                  f'–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –¥–∞–Ω–Ω–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {data[6]}, {data[7]}\n\n'
                                  f'–¢—Ä–µ–±—É–µ–º—ã–π —É—Ä–æ–≤–µ–Ω—å: {player}\n\n'
                                  f'–î–æ—Å—Ç—É–ø: {acs}\n\n'
                                  f'–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {data[8]} {data[9]}\n\n'
                                  f'–û–ø–∏—Å–∞–Ω–∏–µ: {data[10]}',
            reply_markup=pagination_kb.create_pagination_keyboard(
                'backwar',
                f'{events_db[callback.from_user.id][0][0] + 1}/{len(events_db[callback.from_user.id][1])}',
                'forwar'))
        # await callback.message.answer(
        #     text='–ù–∞–∂–∞–≤ –Ω–∞ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—É—é –∫–Ω–æ–ø–∫—É –≤—ã —Å–º–æ–∂–µ—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ!')
    await callback.answer()

@router.callback_query(Text(text='backwar'), StateFilter(SearchEvents.event))
async def process_backward_press(callback: CallbackQuery, state: FSMContext):
    """
    –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ "–Ω–∞–∑–∞–¥"
    –≤–æ –≤—Ä–µ–º—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º-–∫–Ω–∏–≥–æ–π
    """
    if events_db[callback.from_user.id][0][0] > 0:
        events_db[callback.from_user.id][0][0] -= 1
        data = events_db[callback.from_user.id][1][events_db[callback.from_user.id][0][0]]
        if (data[4] == 'lovely_play'):
            player = "üü¢ –ù–æ–≤–∏—á–æ–∫"
        elif (data[4] == 'middle_play'):
            player = "üü° –õ—é–±–∏—Ç–µ–ª—å"
        acs = "üîê –ó–∞–∫—Ä—ã—Ç–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ"
        if (data[3] == 'open_event'):
            acs = "üîì –û—Ç–∫—Ä—ã—Ç–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ"
        await callback.message.edit_text(
            text=f'–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {data[2]}\n\n'
                                  f'–ê–¥—Ä–µ—Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {data[5]}\n\n'
                                  f'–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –¥–∞–Ω–Ω–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {data[6]}, {data[7]}\n\n'
                                  f'–¢—Ä–µ–±—É–µ–º—ã–π —É—Ä–æ–≤–µ–Ω—å: {player}\n\n'
                                  f'–î–æ—Å—Ç—É–ø: {acs}\n\n'
                                  f'–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {data[8]} {data[9]}\n\n'
                                  f'–û–ø–∏—Å–∞–Ω–∏–µ: {data[10]}',
            reply_markup=pagination_kb.create_pagination_keyboard(
                'backwar',
                f'{events_db[callback.from_user.id][0][0] + 1}/{len(events_db[callback.from_user.id][1])}',
                'forwar'))
        # await callback.message.answer(
        #     text='–ù–∞–∂–∞–≤ –Ω–∞ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—É—é –∫–Ω–æ–ø–∫—É –≤—ã —Å–º–æ–∂–µ—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ!')
    await callback.answer()

@router.callback_query(lambda x: '/' in x.data and x.data.replace('/', '').isdigit(), StateFilter(SearchEvents.event))
async def process_middle_presed(callback: CallbackQuery, state: FSMContext):
    if (BotDB.user_exists(callback.from_user.id) == False):
        reg_botton: InlineKeyboardButton = InlineKeyboardButton(
            text='ü§ùüèº –ü–æ–∑–Ω–∞–∫–æ–º–∏—Ç—Å—è',
            callback_data='user_registration')
        canc_botton: InlineKeyboardButton = InlineKeyboardButton(
            text='üôÖüèΩ –û—Ç–º–µ–Ω–∞',
            callback_data='cancel_registration')
        keyboard: InlineKeyboardMarkup = InlineKeyboardMarkup(
            inline_keyboard=[[reg_botton, canc_botton]])
        await callback.message.answer(text='–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–æ—Ç–µ!\n'
                                           '–ù–æ –≤—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ —Å–µ–π—á–∞—Å:',
                                      reply_markup=keyboard)
    else:
        user_info = BotDB.get_info_about_user(callback.from_user.id)
        # events_db[callback.from_user.id] = [[0], all_events]
        event_level = events_db[callback.from_user.id][1][events_db[callback.from_user.id][0][0]][4]
        event_id = events_db[callback.from_user.id][1][events_db[callback.from_user.id][0][0]][0]
        print(event_id)
        if (event_level != user_info[4]):
            await callback.message.answer(text='–£—Ä–æ–≤–µ–Ω—å –∏–≥—Ä—ã –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω—É–∂–Ω–æ–º—É!')
        else:
            BotDB.add_player_on_event(callback.message.from_user.id, event_id)
            await callback.message.answer(text='–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!')
    await state.clear()
    await callback.answer()


@router.message()
async def procces_handl_another_messages(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    """
    menu_botton: KeyboardButton = KeyboardButton(text=' üè† –ú–µ–Ω—é')
    keyboard2: ReplyKeyboardMarkup = ReplyKeyboardMarkup(keyboard=[[menu_botton]],
                                                         resize_keybord=True)
    await message.answer(text='–í–∞—à –∑–∞–ø—Ä–æ—Å –º–Ω–µ –Ω–µ –ø–æ–Ω—è—Ç–µ–Ω!',
                         reply_markup=keyboard2)
